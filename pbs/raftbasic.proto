syntax = "proto3";

package pbs;

option go_package = "../raftpb";

//
// raft basic request vote  definition
//
message RequestVoteRequest {
  int64 term = 1;
  int64 candidate_id = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

//
// raft basic request vote response
//
message RequestVoteResponse {
  int64 term = 1;
  bool  vote_granted = 2;
}

//
// the log entry type
// 1.normal -> like put, get key
// 2.conf change -> cluster config change
//
enum EntryType {
  EntryNormal = 0;
  EntryConfChange = 1;
}

//
// raft basic log entry definition
//
message Entry {
  EntryType entry_type = 1;
  uint64    term = 2;
  int64     index = 3;
  bytes     data = 4;
}

// 
// raft basic append entries request definition
//
message AppendEntriesRequest {
  int64    term = 1;
  int64    leader_id = 2;
  int64    prev_log_index = 3;
  int64    prev_log_term = 4;
  int64    leader_commit = 5;
  repeated Entry entries = 6;
}

//
// raft basic append entries response definition
//
message AppendEntriesResponse {
  int64  term = 1;
  bool  success = 2;
  int64 conflict_index = 3;
  int64 conflict_term = 4;
}

//
// apply message definition
//
message ApplyMsg {
  bool   CommandValid = 1;
  bytes  Command = 2;
  int64  CommandTerm = 3;
  int64  CommandIndex = 4;
  bool   SnapshotValid = 5;
  bytes  Snapshot = 6;
  int64  SnapshotTerm = 7;
  int64  SnapshotIndex = 8;
}

//
// client op type
//
enum OpType {
  OpPut = 0;
  OpAppend = 1;
  OpGet = 2;
  OpConfigChange = 3;
  OpDeleteBuckets = 4;
  OpInsertBuckets = 5;
}

//
// client command request
//
message CommandRequest {
  string key = 1;
  string value = 2;
  OpType op_type = 3;
  int64  client_id = 4;
  int64  command_id = 5;
  bytes  context = 6;
}

//
// client command response
//
message CommandResponse {
  string value = 1;
  int64  leader_id = 2;
  int64  err_code = 3;
}

//
// config client op type
//
enum ConfigOpType {
  OpJoin = 0;
  OpLeave = 1;
  OpMove = 2;
  OpQuery = 3;
  OpSetBucket = 4;
  OpMigBucket = 5;
}

//
// config server request
// to manager the server config table
//
message ConfigRequest {
  map<int64, string> servers = 1; // gid -> [s1, s2, s3]
  repeated int64  gids = 2;
  int64  bucket_id = 3;
  int64  gid = 4;
  int64 config_version = 5;
  ConfigOpType op_type = 6;
  int64  client_id = 7;
  int64  command_id = 8;
}

//
//
//
message ServerConfig {
  int64  config_version = 1;
  repeated int64 buckets = 2;
  map<int64, string> groups = 3; // gid -> [s1, s2, s3]
}

message ConfigResponse {
  string err_msg = 1;
  ServerConfig config = 2;
  int64 leader_id = 3;
  int64 err_code = 4;
}

enum BucketOpType {
  OpGetData = 0;
  OpDeleteData = 1;
  OpInsertData = 2;
}

message BucketOperationRequest {
  int64 config_version = 1;
  repeated int64 bucket_ids = 2;
  BucketOpType bucket_op_type = 3;
  int64 gid = 4;
  bytes buckets_datas = 5;
}

message BucketOperationResponse {
  int64 config_version = 1;
  bytes buckets_datas = 2;
  string err_msg = 3;
}

message InstallSnapshotRequest {
  int64 term = 1;
  int64 leader_id = 2;
  int64 last_included_index = 3;
  int64 last_included_term = 4;
  bytes data = 5;
}

message InstallSnapshotResponse {
  int64 term = 1;
}

service RaftService {
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
  rpc DoCommand (CommandRequest) returns (CommandResponse) {}
  rpc DoConfig (ConfigRequest) returns (ConfigResponse) {}
  rpc DoBucketsOperation (BucketOperationRequest) returns (BucketOperationResponse) {}
  rpc Snapshot (InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
}
