// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eraftkv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eraftkv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eraftkv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eraftkv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eraftkv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eraftkv_2eproto;
namespace eraftkv {
class AppendEntriesReq;
class AppendEntriesReqDefaultTypeInternal;
extern AppendEntriesReqDefaultTypeInternal _AppendEntriesReq_default_instance_;
class AppendEntriesResp;
class AppendEntriesRespDefaultTypeInternal;
extern AppendEntriesRespDefaultTypeInternal _AppendEntriesResp_default_instance_;
class ClientOperationReq;
class ClientOperationReqDefaultTypeInternal;
extern ClientOperationReqDefaultTypeInternal _ClientOperationReq_default_instance_;
class ClientOperationResp;
class ClientOperationRespDefaultTypeInternal;
extern ClientOperationRespDefaultTypeInternal _ClientOperationResp_default_instance_;
class ClusterConfigChangeReq;
class ClusterConfigChangeReqDefaultTypeInternal;
extern ClusterConfigChangeReqDefaultTypeInternal _ClusterConfigChangeReq_default_instance_;
class ClusterConfigChangeResp;
class ClusterConfigChangeRespDefaultTypeInternal;
extern ClusterConfigChangeRespDefaultTypeInternal _ClusterConfigChangeResp_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class KeyRange;
class KeyRangeDefaultTypeInternal;
extern KeyRangeDefaultTypeInternal _KeyRange_default_instance_;
class KvOpPair;
class KvOpPairDefaultTypeInternal;
extern KvOpPairDefaultTypeInternal _KvOpPair_default_instance_;
class RequestVoteReq;
class RequestVoteReqDefaultTypeInternal;
extern RequestVoteReqDefaultTypeInternal _RequestVoteReq_default_instance_;
class RequestVoteResp;
class RequestVoteRespDefaultTypeInternal;
extern RequestVoteRespDefaultTypeInternal _RequestVoteResp_default_instance_;
class Server;
class ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
class ShardGroup;
class ShardGroupDefaultTypeInternal;
extern ShardGroupDefaultTypeInternal _ShardGroup_default_instance_;
class SnapshotBlock;
class SnapshotBlockDefaultTypeInternal;
extern SnapshotBlockDefaultTypeInternal _SnapshotBlock_default_instance_;
class SnapshotReq;
class SnapshotReqDefaultTypeInternal;
extern SnapshotReqDefaultTypeInternal _SnapshotReq_default_instance_;
class SnapshotResp;
class SnapshotRespDefaultTypeInternal;
extern SnapshotRespDefaultTypeInternal _SnapshotResp_default_instance_;
}  // namespace eraftkv
PROTOBUF_NAMESPACE_OPEN
template<> ::eraftkv::AppendEntriesReq* Arena::CreateMaybeMessage<::eraftkv::AppendEntriesReq>(Arena*);
template<> ::eraftkv::AppendEntriesResp* Arena::CreateMaybeMessage<::eraftkv::AppendEntriesResp>(Arena*);
template<> ::eraftkv::ClientOperationReq* Arena::CreateMaybeMessage<::eraftkv::ClientOperationReq>(Arena*);
template<> ::eraftkv::ClientOperationResp* Arena::CreateMaybeMessage<::eraftkv::ClientOperationResp>(Arena*);
template<> ::eraftkv::ClusterConfigChangeReq* Arena::CreateMaybeMessage<::eraftkv::ClusterConfigChangeReq>(Arena*);
template<> ::eraftkv::ClusterConfigChangeResp* Arena::CreateMaybeMessage<::eraftkv::ClusterConfigChangeResp>(Arena*);
template<> ::eraftkv::Entry* Arena::CreateMaybeMessage<::eraftkv::Entry>(Arena*);
template<> ::eraftkv::KeyRange* Arena::CreateMaybeMessage<::eraftkv::KeyRange>(Arena*);
template<> ::eraftkv::KvOpPair* Arena::CreateMaybeMessage<::eraftkv::KvOpPair>(Arena*);
template<> ::eraftkv::RequestVoteReq* Arena::CreateMaybeMessage<::eraftkv::RequestVoteReq>(Arena*);
template<> ::eraftkv::RequestVoteResp* Arena::CreateMaybeMessage<::eraftkv::RequestVoteResp>(Arena*);
template<> ::eraftkv::Server* Arena::CreateMaybeMessage<::eraftkv::Server>(Arena*);
template<> ::eraftkv::ShardGroup* Arena::CreateMaybeMessage<::eraftkv::ShardGroup>(Arena*);
template<> ::eraftkv::SnapshotBlock* Arena::CreateMaybeMessage<::eraftkv::SnapshotBlock>(Arena*);
template<> ::eraftkv::SnapshotReq* Arena::CreateMaybeMessage<::eraftkv::SnapshotReq>(Arena*);
template<> ::eraftkv::SnapshotResp* Arena::CreateMaybeMessage<::eraftkv::SnapshotResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eraftkv {

enum ErrorCode : int {
  REQUEST_NOT_LEADER_NODE = 0,
  NODE_IS_DOWN = 1,
  REQUEST_TIMEOUT = 2,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = REQUEST_NOT_LEADER_NODE;
constexpr ErrorCode ErrorCode_MAX = REQUEST_TIMEOUT;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum EntryType : int {
  Normal = 0,
  ConfChange = 1,
  NoOp = 2,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = Normal;
constexpr EntryType EntryType_MAX = NoOp;
constexpr int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor();
template<typename T>
inline const std::string& EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryType_descriptor(), enum_t_value);
}
inline bool EntryType_Parse(
    const std::string& name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum KeyRangeStatus : int {
  Running = 0,
  Migrating = 1,
  Importing = 2,
  Init = 3,
  KeyRangeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KeyRangeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KeyRangeStatus_IsValid(int value);
constexpr KeyRangeStatus KeyRangeStatus_MIN = Running;
constexpr KeyRangeStatus KeyRangeStatus_MAX = Init;
constexpr int KeyRangeStatus_ARRAYSIZE = KeyRangeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyRangeStatus_descriptor();
template<typename T>
inline const std::string& KeyRangeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyRangeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyRangeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyRangeStatus_descriptor(), enum_t_value);
}
inline bool KeyRangeStatus_Parse(
    const std::string& name, KeyRangeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyRangeStatus>(
    KeyRangeStatus_descriptor(), name, value);
}
enum ServerStatus : int {
  Up = 0,
  Down = 1,
  ServerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerStatus_IsValid(int value);
constexpr ServerStatus ServerStatus_MIN = Up;
constexpr ServerStatus ServerStatus_MAX = Down;
constexpr int ServerStatus_ARRAYSIZE = ServerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerStatus_descriptor();
template<typename T>
inline const std::string& ServerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerStatus_descriptor(), enum_t_value);
}
inline bool ServerStatus_Parse(
    const std::string& name, ServerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerStatus>(
    ServerStatus_descriptor(), name, value);
}
enum ClusterConfigChangeType : int {
  ClusterInit = 0,
  AddServer = 1,
  RemoveServer = 2,
  ClusterConfigChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClusterConfigChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClusterConfigChangeType_IsValid(int value);
constexpr ClusterConfigChangeType ClusterConfigChangeType_MIN = ClusterInit;
constexpr ClusterConfigChangeType ClusterConfigChangeType_MAX = RemoveServer;
constexpr int ClusterConfigChangeType_ARRAYSIZE = ClusterConfigChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClusterConfigChangeType_descriptor();
template<typename T>
inline const std::string& ClusterConfigChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClusterConfigChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClusterConfigChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClusterConfigChangeType_descriptor(), enum_t_value);
}
inline bool ClusterConfigChangeType_Parse(
    const std::string& name, ClusterConfigChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClusterConfigChangeType>(
    ClusterConfigChangeType_descriptor(), name, value);
}
enum ClientOpType : int {
  Noop = 0,
  Put = 1,
  Get = 2,
  Del = 3,
  Scan = 4,
  ClientOpType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientOpType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientOpType_IsValid(int value);
constexpr ClientOpType ClientOpType_MIN = Noop;
constexpr ClientOpType ClientOpType_MAX = Scan;
constexpr int ClientOpType_ARRAYSIZE = ClientOpType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientOpType_descriptor();
template<typename T>
inline const std::string& ClientOpType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientOpType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientOpType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientOpType_descriptor(), enum_t_value);
}
inline bool ClientOpType_Parse(
    const std::string& name, ClientOpType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientOpType>(
    ClientOpType_descriptor(), name, value);
}
// ===================================================================

class RequestVoteReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.RequestVoteReq) */ {
 public:
  RequestVoteReq();
  virtual ~RequestVoteReq();

  RequestVoteReq(const RequestVoteReq& from);
  RequestVoteReq(RequestVoteReq&& from) noexcept
    : RequestVoteReq() {
    *this = ::std::move(from);
  }

  inline RequestVoteReq& operator=(const RequestVoteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReq& operator=(RequestVoteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteReq* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReq*>(
               &_RequestVoteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteReq& a, RequestVoteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteReq* New() const final {
    return CreateMaybeMessage<RequestVoteReq>(nullptr);
  }

  RequestVoteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteReq& from);
  void MergeFrom(const RequestVoteReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.RequestVoteReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 2,
    kCandidtateIdFieldNumber = 3,
    kLastLogIdxFieldNumber = 4,
    kLastLogTermFieldNumber = 5,
    kPrevoteFieldNumber = 1,
  };
  // int64 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 candidtate_id = 3;
  void clear_candidtate_id();
  ::PROTOBUF_NAMESPACE_ID::int64 candidtate_id() const;
  void set_candidtate_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_candidtate_id() const;
  void _internal_set_candidtate_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_log_idx = 4;
  void clear_last_log_idx();
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_idx() const;
  void set_last_log_idx(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_log_idx() const;
  void _internal_set_last_log_idx(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_log_term = 5;
  void clear_last_log_term();
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_log_term() const;
  void _internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool prevote = 1;
  void clear_prevote();
  bool prevote() const;
  void set_prevote(bool value);
  private:
  bool _internal_prevote() const;
  void _internal_set_prevote(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.RequestVoteReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 candidtate_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_idx_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_term_;
  bool prevote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.RequestVoteResp) */ {
 public:
  RequestVoteResp();
  virtual ~RequestVoteResp();

  RequestVoteResp(const RequestVoteResp& from);
  RequestVoteResp(RequestVoteResp&& from) noexcept
    : RequestVoteResp() {
    *this = ::std::move(from);
  }

  inline RequestVoteResp& operator=(const RequestVoteResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResp& operator=(RequestVoteResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResp* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResp*>(
               &_RequestVoteResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteResp& a, RequestVoteResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResp* New() const final {
    return CreateMaybeMessage<RequestVoteResp>(nullptr);
  }

  RequestVoteResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResp& from);
  void MergeFrom(const RequestVoteResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.RequestVoteResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestTermFieldNumber = 2,
    kTermFieldNumber = 3,
    kLeaderIdFieldNumber = 5,
    kPrevoteFieldNumber = 1,
    kVoteGrantedFieldNumber = 4,
  };
  // int64 request_term = 2;
  void clear_request_term();
  ::PROTOBUF_NAMESPACE_ID::int64 request_term() const;
  void set_request_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_request_term() const;
  void _internal_set_request_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 term = 3;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 leader_id = 5;
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::int64 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_leader_id() const;
  void _internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool prevote = 1;
  void clear_prevote();
  bool prevote() const;
  void set_prevote(bool value);
  private:
  bool _internal_prevote() const;
  void _internal_set_prevote(bool value);
  public:

  // bool vote_granted = 4;
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);
  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.RequestVoteResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 request_term_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 leader_id_;
  bool prevote_;
  bool vote_granted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kTermFieldNumber = 1,
    kIdFieldNumber = 2,
    kDataSizeFieldNumber = 4,
    kETypeFieldNumber = 3,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 data_size = 4;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::int64 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data_size() const;
  void _internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .eraftkv.EntryType e_type = 3;
  void clear_e_type();
  ::eraftkv::EntryType e_type() const;
  void set_e_type(::eraftkv::EntryType value);
  private:
  ::eraftkv::EntryType _internal_e_type() const;
  void _internal_set_e_type(::eraftkv::EntryType value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_size_;
  int e_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.AppendEntriesReq) */ {
 public:
  AppendEntriesReq();
  virtual ~AppendEntriesReq();

  AppendEntriesReq(const AppendEntriesReq& from);
  AppendEntriesReq(AppendEntriesReq&& from) noexcept
    : AppendEntriesReq() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReq& operator=(const AppendEntriesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReq& operator=(AppendEntriesReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesReq* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReq*>(
               &_AppendEntriesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntriesReq& a, AppendEntriesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesReq* New() const final {
    return CreateMaybeMessage<AppendEntriesReq>(nullptr);
  }

  AppendEntriesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesReq& from);
  void MergeFrom(const AppendEntriesReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.AppendEntriesReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 8,
    kLeaderIdFieldNumber = 1,
    kMessageIndexFieldNumber = 2,
    kTermFieldNumber = 3,
    kPrevLogIndexFieldNumber = 4,
    kPrevLogTermFieldNumber = 5,
    kLeaderCommitFieldNumber = 6,
    kIsHeartbeatFieldNumber = 7,
  };
  // repeated .eraftkv.Entry entries = 8;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::eraftkv::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Entry >*
      mutable_entries();
  private:
  const ::eraftkv::Entry& _internal_entries(int index) const;
  ::eraftkv::Entry* _internal_add_entries();
  public:
  const ::eraftkv::Entry& entries(int index) const;
  ::eraftkv::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Entry >&
      entries() const;

  // int64 leader_id = 1;
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::int64 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_leader_id() const;
  void _internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 message_index = 2;
  void clear_message_index();
  ::PROTOBUF_NAMESPACE_ID::int64 message_index() const;
  void set_message_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_index() const;
  void _internal_set_message_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 term = 3;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 prev_log_index = 4;
  void clear_prev_log_index();
  ::PROTOBUF_NAMESPACE_ID::int64 prev_log_index() const;
  void set_prev_log_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prev_log_index() const;
  void _internal_set_prev_log_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 prev_log_term = 5;
  void clear_prev_log_term();
  ::PROTOBUF_NAMESPACE_ID::int64 prev_log_term() const;
  void set_prev_log_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_prev_log_term() const;
  void _internal_set_prev_log_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 leader_commit = 6;
  void clear_leader_commit();
  ::PROTOBUF_NAMESPACE_ID::int64 leader_commit() const;
  void set_leader_commit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_leader_commit() const;
  void _internal_set_leader_commit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_heartbeat = 7;
  void clear_is_heartbeat();
  bool is_heartbeat() const;
  void set_is_heartbeat(bool value);
  private:
  bool _internal_is_heartbeat() const;
  void _internal_set_is_heartbeat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.AppendEntriesReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::int64 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 prev_log_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 prev_log_term_;
  ::PROTOBUF_NAMESPACE_ID::int64 leader_commit_;
  bool is_heartbeat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.AppendEntriesResp) */ {
 public:
  AppendEntriesResp();
  virtual ~AppendEntriesResp();

  AppendEntriesResp(const AppendEntriesResp& from);
  AppendEntriesResp(AppendEntriesResp&& from) noexcept
    : AppendEntriesResp() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResp& operator=(const AppendEntriesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResp& operator=(AppendEntriesResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResp* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResp*>(
               &_AppendEntriesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppendEntriesResp& a, AppendEntriesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResp* New() const final {
    return CreateMaybeMessage<AppendEntriesResp>(nullptr);
  }

  AppendEntriesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResp& from);
  void MergeFrom(const AppendEntriesResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.AppendEntriesResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTokenFieldNumber = 1,
    kTermFieldNumber = 2,
    kCurrentIndexFieldNumber = 4,
    kConflictIndexFieldNumber = 5,
    kConflictTermFieldNumber = 6,
    kSuccessFieldNumber = 3,
  };
  // string message_token = 1;
  void clear_message_token();
  const std::string& message_token() const;
  void set_message_token(const std::string& value);
  void set_message_token(std::string&& value);
  void set_message_token(const char* value);
  void set_message_token(const char* value, size_t size);
  std::string* mutable_message_token();
  std::string* release_message_token();
  void set_allocated_message_token(std::string* message_token);
  private:
  const std::string& _internal_message_token() const;
  void _internal_set_message_token(const std::string& value);
  std::string* _internal_mutable_message_token();
  public:

  // int64 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 current_index = 4;
  void clear_current_index();
  ::PROTOBUF_NAMESPACE_ID::int64 current_index() const;
  void set_current_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_current_index() const;
  void _internal_set_current_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 conflict_index = 5;
  void clear_conflict_index();
  ::PROTOBUF_NAMESPACE_ID::int64 conflict_index() const;
  void set_conflict_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_conflict_index() const;
  void _internal_set_conflict_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 conflict_term = 6;
  void clear_conflict_term();
  ::PROTOBUF_NAMESPACE_ID::int64 conflict_term() const;
  void set_conflict_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_conflict_term() const;
  void _internal_set_conflict_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.AppendEntriesResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 conflict_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 conflict_term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class SnapshotBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.SnapshotBlock) */ {
 public:
  SnapshotBlock();
  virtual ~SnapshotBlock();

  SnapshotBlock(const SnapshotBlock& from);
  SnapshotBlock(SnapshotBlock&& from) noexcept
    : SnapshotBlock() {
    *this = ::std::move(from);
  }

  inline SnapshotBlock& operator=(const SnapshotBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotBlock& operator=(SnapshotBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotBlock* internal_default_instance() {
    return reinterpret_cast<const SnapshotBlock*>(
               &_SnapshotBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SnapshotBlock& a, SnapshotBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotBlock* New() const final {
    return CreateMaybeMessage<SnapshotBlock>(nullptr);
  }

  SnapshotBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotBlock& from);
  void MergeFrom(const SnapshotBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.SnapshotBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kOffsetFieldNumber = 1,
    kBlockSizeFieldNumber = 3,
    kIsLastChunkFieldNumber = 4,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 block_size = 3;
  void clear_block_size();
  ::PROTOBUF_NAMESPACE_ID::int64 block_size() const;
  void set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_block_size() const;
  void _internal_set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_last_chunk = 4;
  void clear_is_last_chunk();
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);
  private:
  bool _internal_is_last_chunk() const;
  void _internal_set_is_last_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.SnapshotBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 block_size_;
  bool is_last_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class SnapshotReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.SnapshotReq) */ {
 public:
  SnapshotReq();
  virtual ~SnapshotReq();

  SnapshotReq(const SnapshotReq& from);
  SnapshotReq(SnapshotReq&& from) noexcept
    : SnapshotReq() {
    *this = ::std::move(from);
  }

  inline SnapshotReq& operator=(const SnapshotReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotReq& operator=(SnapshotReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotReq* internal_default_instance() {
    return reinterpret_cast<const SnapshotReq*>(
               &_SnapshotReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SnapshotReq& a, SnapshotReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotReq* New() const final {
    return CreateMaybeMessage<SnapshotReq>(nullptr);
  }

  SnapshotReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotReq& from);
  void MergeFrom(const SnapshotReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.SnapshotReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIndexFieldNumber = 3,
    kBlockFieldNumber = 6,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kSnapshotIndexFieldNumber = 4,
    kSnapshotTermFieldNumber = 5,
  };
  // string message_index = 3;
  void clear_message_index();
  const std::string& message_index() const;
  void set_message_index(const std::string& value);
  void set_message_index(std::string&& value);
  void set_message_index(const char* value);
  void set_message_index(const char* value, size_t size);
  std::string* mutable_message_index();
  std::string* release_message_index();
  void set_allocated_message_index(std::string* message_index);
  private:
  const std::string& _internal_message_index() const;
  void _internal_set_message_index(const std::string& value);
  std::string* _internal_mutable_message_index();
  public:

  // .eraftkv.SnapshotBlock block = 6;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::eraftkv::SnapshotBlock& block() const;
  ::eraftkv::SnapshotBlock* release_block();
  ::eraftkv::SnapshotBlock* mutable_block();
  void set_allocated_block(::eraftkv::SnapshotBlock* block);
  private:
  const ::eraftkv::SnapshotBlock& _internal_block() const;
  ::eraftkv::SnapshotBlock* _internal_mutable_block();
  public:

  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 leader_id = 2;
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::int64 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_leader_id() const;
  void _internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 snapshot_index = 4;
  void clear_snapshot_index();
  ::PROTOBUF_NAMESPACE_ID::int64 snapshot_index() const;
  void set_snapshot_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_snapshot_index() const;
  void _internal_set_snapshot_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 snapshot_term = 5;
  void clear_snapshot_term();
  ::PROTOBUF_NAMESPACE_ID::int64 snapshot_term() const;
  void set_snapshot_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_snapshot_term() const;
  void _internal_set_snapshot_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.SnapshotReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_index_;
  ::eraftkv::SnapshotBlock* block_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 snapshot_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 snapshot_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class SnapshotResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.SnapshotResp) */ {
 public:
  SnapshotResp();
  virtual ~SnapshotResp();

  SnapshotResp(const SnapshotResp& from);
  SnapshotResp(SnapshotResp&& from) noexcept
    : SnapshotResp() {
    *this = ::std::move(from);
  }

  inline SnapshotResp& operator=(const SnapshotResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotResp& operator=(SnapshotResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotResp* internal_default_instance() {
    return reinterpret_cast<const SnapshotResp*>(
               &_SnapshotResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SnapshotResp& a, SnapshotResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapshotResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnapshotResp* New() const final {
    return CreateMaybeMessage<SnapshotResp>(nullptr);
  }

  SnapshotResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotResp& from);
  void MergeFrom(const SnapshotResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.SnapshotResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIndexFieldNumber = 2,
    kTermFieldNumber = 1,
    kOffsetFieldNumber = 3,
    kSuccessFieldNumber = 4,
    kIsLastChunkFieldNumber = 5,
  };
  // string message_index = 2;
  void clear_message_index();
  const std::string& message_index() const;
  void set_message_index(const std::string& value);
  void set_message_index(std::string&& value);
  void set_message_index(const char* value);
  void set_message_index(const char* value, size_t size);
  std::string* mutable_message_index();
  std::string* release_message_index();
  void set_allocated_message_index(std::string* message_index);
  private:
  const std::string& _internal_message_index() const;
  void _internal_set_message_index(const std::string& value);
  std::string* _internal_mutable_message_index();
  public:

  // int64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool is_last_chunk = 5;
  void clear_is_last_chunk();
  bool is_last_chunk() const;
  void set_is_last_chunk(bool value);
  private:
  bool _internal_is_last_chunk() const;
  void _internal_set_is_last_chunk(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.SnapshotResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  bool success_;
  bool is_last_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class KeyRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.KeyRange) */ {
 public:
  KeyRange();
  virtual ~KeyRange();

  KeyRange(const KeyRange& from);
  KeyRange(KeyRange&& from) noexcept
    : KeyRange() {
    *this = ::std::move(from);
  }

  inline KeyRange& operator=(const KeyRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyRange& operator=(KeyRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyRange* internal_default_instance() {
    return reinterpret_cast<const KeyRange*>(
               &_KeyRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KeyRange& a, KeyRange& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyRange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyRange* New() const final {
    return CreateMaybeMessage<KeyRange>(nullptr);
  }

  KeyRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyRange& from);
  void MergeFrom(const KeyRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.KeyRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 4,
    kEndFieldNumber = 5,
    kShardIdFieldNumber = 2,
    kStatusModifyTimeFieldNumber = 3,
    kKeyRangeStatusFieldNumber = 1,
  };
  // string start = 4;
  void clear_start();
  const std::string& start() const;
  void set_start(const std::string& value);
  void set_start(std::string&& value);
  void set_start(const char* value);
  void set_start(const char* value, size_t size);
  std::string* mutable_start();
  std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 5;
  void clear_end();
  const std::string& end() const;
  void set_end(const std::string& value);
  void set_end(std::string&& value);
  void set_end(const char* value);
  void set_end(const char* value, size_t size);
  std::string* mutable_end();
  std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // int64 shard_id = 2;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::int64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 status_modify_time = 3;
  void clear_status_modify_time();
  ::PROTOBUF_NAMESPACE_ID::int64 status_modify_time() const;
  void set_status_modify_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_status_modify_time() const;
  void _internal_set_status_modify_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .eraftkv.KeyRangeStatus key_range_status = 1;
  void clear_key_range_status();
  ::eraftkv::KeyRangeStatus key_range_status() const;
  void set_key_range_status(::eraftkv::KeyRangeStatus value);
  private:
  ::eraftkv::KeyRangeStatus _internal_key_range_status() const;
  void _internal_set_key_range_status(::eraftkv::KeyRangeStatus value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.KeyRange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  ::PROTOBUF_NAMESPACE_ID::int64 shard_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 status_modify_time_;
  int key_range_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class Server :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.Server) */ {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return CreateMaybeMessage<Server>(nullptr);
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.Server";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kIdFieldNumber = 1,
    kServerStatusFieldNumber = 3,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .eraftkv.ServerStatus server_status = 3;
  void clear_server_status();
  ::eraftkv::ServerStatus server_status() const;
  void set_server_status(::eraftkv::ServerStatus value);
  private:
  ::eraftkv::ServerStatus _internal_server_status() const;
  void _internal_set_server_status(::eraftkv::ServerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.Server)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int server_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class ShardGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.ShardGroup) */ {
 public:
  ShardGroup();
  virtual ~ShardGroup();

  ShardGroup(const ShardGroup& from);
  ShardGroup(ShardGroup&& from) noexcept
    : ShardGroup() {
    *this = ::std::move(from);
  }

  inline ShardGroup& operator=(const ShardGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardGroup& operator=(ShardGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShardGroup* internal_default_instance() {
    return reinterpret_cast<const ShardGroup*>(
               &_ShardGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ShardGroup& a, ShardGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardGroup* New() const final {
    return CreateMaybeMessage<ShardGroup>(nullptr);
  }

  ShardGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardGroup& from);
  void MergeFrom(const ShardGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.ShardGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 3,
    kKeyRangeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .eraftkv.Server servers = 3;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::eraftkv::Server* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Server >*
      mutable_servers();
  private:
  const ::eraftkv::Server& _internal_servers(int index) const;
  ::eraftkv::Server* _internal_add_servers();
  public:
  const ::eraftkv::Server& servers(int index) const;
  ::eraftkv::Server* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Server >&
      servers() const;

  // .eraftkv.KeyRange key_range = 2;
  bool has_key_range() const;
  private:
  bool _internal_has_key_range() const;
  public:
  void clear_key_range();
  const ::eraftkv::KeyRange& key_range() const;
  ::eraftkv::KeyRange* release_key_range();
  ::eraftkv::KeyRange* mutable_key_range();
  void set_allocated_key_range(::eraftkv::KeyRange* key_range);
  private:
  const ::eraftkv::KeyRange& _internal_key_range() const;
  ::eraftkv::KeyRange* _internal_mutable_key_range();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.ShardGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Server > servers_;
  ::eraftkv::KeyRange* key_range_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class ClusterConfigChangeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.ClusterConfigChangeReq) */ {
 public:
  ClusterConfigChangeReq();
  virtual ~ClusterConfigChangeReq();

  ClusterConfigChangeReq(const ClusterConfigChangeReq& from);
  ClusterConfigChangeReq(ClusterConfigChangeReq&& from) noexcept
    : ClusterConfigChangeReq() {
    *this = ::std::move(from);
  }

  inline ClusterConfigChangeReq& operator=(const ClusterConfigChangeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterConfigChangeReq& operator=(ClusterConfigChangeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterConfigChangeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterConfigChangeReq* internal_default_instance() {
    return reinterpret_cast<const ClusterConfigChangeReq*>(
               &_ClusterConfigChangeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClusterConfigChangeReq& a, ClusterConfigChangeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterConfigChangeReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterConfigChangeReq* New() const final {
    return CreateMaybeMessage<ClusterConfigChangeReq>(nullptr);
  }

  ClusterConfigChangeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterConfigChangeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterConfigChangeReq& from);
  void MergeFrom(const ClusterConfigChangeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterConfigChangeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.ClusterConfigChangeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerFieldNumber = 3,
    kShardIdFieldNumber = 2,
    kConfigVersionFieldNumber = 4,
    kOpCountFieldNumber = 5,
    kChangeTypeFieldNumber = 1,
  };
  // .eraftkv.Server server = 3;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::eraftkv::Server& server() const;
  ::eraftkv::Server* release_server();
  ::eraftkv::Server* mutable_server();
  void set_allocated_server(::eraftkv::Server* server);
  private:
  const ::eraftkv::Server& _internal_server() const;
  ::eraftkv::Server* _internal_mutable_server();
  public:

  // int64 shard_id = 2;
  void clear_shard_id();
  ::PROTOBUF_NAMESPACE_ID::int64 shard_id() const;
  void set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shard_id() const;
  void _internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 config_version = 4;
  void clear_config_version();
  ::PROTOBUF_NAMESPACE_ID::int64 config_version() const;
  void set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_config_version() const;
  void _internal_set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 op_count = 5;
  void clear_op_count();
  ::PROTOBUF_NAMESPACE_ID::int64 op_count() const;
  void set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_op_count() const;
  void _internal_set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .eraftkv.ClusterConfigChangeType change_type = 1;
  void clear_change_type();
  ::eraftkv::ClusterConfigChangeType change_type() const;
  void set_change_type(::eraftkv::ClusterConfigChangeType value);
  private:
  ::eraftkv::ClusterConfigChangeType _internal_change_type() const;
  void _internal_set_change_type(::eraftkv::ClusterConfigChangeType value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.ClusterConfigChangeReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eraftkv::Server* server_;
  ::PROTOBUF_NAMESPACE_ID::int64 shard_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 config_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 op_count_;
  int change_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class ClusterConfigChangeResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.ClusterConfigChangeResp) */ {
 public:
  ClusterConfigChangeResp();
  virtual ~ClusterConfigChangeResp();

  ClusterConfigChangeResp(const ClusterConfigChangeResp& from);
  ClusterConfigChangeResp(ClusterConfigChangeResp&& from) noexcept
    : ClusterConfigChangeResp() {
    *this = ::std::move(from);
  }

  inline ClusterConfigChangeResp& operator=(const ClusterConfigChangeResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterConfigChangeResp& operator=(ClusterConfigChangeResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClusterConfigChangeResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterConfigChangeResp* internal_default_instance() {
    return reinterpret_cast<const ClusterConfigChangeResp*>(
               &_ClusterConfigChangeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClusterConfigChangeResp& a, ClusterConfigChangeResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterConfigChangeResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClusterConfigChangeResp* New() const final {
    return CreateMaybeMessage<ClusterConfigChangeResp>(nullptr);
  }

  ClusterConfigChangeResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClusterConfigChangeResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClusterConfigChangeResp& from);
  void MergeFrom(const ClusterConfigChangeResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterConfigChangeResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.ClusterConfigChangeResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShardGroupFieldNumber = 2,
    kConfigVersionFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated .eraftkv.ShardGroup shard_group = 2;
  int shard_group_size() const;
  private:
  int _internal_shard_group_size() const;
  public:
  void clear_shard_group();
  ::eraftkv::ShardGroup* mutable_shard_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::ShardGroup >*
      mutable_shard_group();
  private:
  const ::eraftkv::ShardGroup& _internal_shard_group(int index) const;
  ::eraftkv::ShardGroup* _internal_add_shard_group();
  public:
  const ::eraftkv::ShardGroup& shard_group(int index) const;
  ::eraftkv::ShardGroup* add_shard_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::ShardGroup >&
      shard_group() const;

  // int64 config_version = 3;
  void clear_config_version();
  ::PROTOBUF_NAMESPACE_ID::int64 config_version() const;
  void set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_config_version() const;
  void _internal_set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.ClusterConfigChangeResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::ShardGroup > shard_group_;
  ::PROTOBUF_NAMESPACE_ID::int64 config_version_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class KvOpPair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.KvOpPair) */ {
 public:
  KvOpPair();
  virtual ~KvOpPair();

  KvOpPair(const KvOpPair& from);
  KvOpPair(KvOpPair&& from) noexcept
    : KvOpPair() {
    *this = ::std::move(from);
  }

  inline KvOpPair& operator=(const KvOpPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvOpPair& operator=(KvOpPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KvOpPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvOpPair* internal_default_instance() {
    return reinterpret_cast<const KvOpPair*>(
               &_KvOpPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(KvOpPair& a, KvOpPair& b) {
    a.Swap(&b);
  }
  inline void Swap(KvOpPair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KvOpPair* New() const final {
    return CreateMaybeMessage<KvOpPair>(nullptr);
  }

  KvOpPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KvOpPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KvOpPair& from);
  void MergeFrom(const KvOpPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvOpPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.KvOpPair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kOpTypeFieldNumber = 1,
    kSuccessFieldNumber = 4,
    kOpCountFieldNumber = 5,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .eraftkv.ClientOpType op_type = 1;
  void clear_op_type();
  ::eraftkv::ClientOpType op_type() const;
  void set_op_type(::eraftkv::ClientOpType value);
  private:
  ::eraftkv::ClientOpType _internal_op_type() const;
  void _internal_set_op_type(::eraftkv::ClientOpType value);
  public:

  // bool success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int64 op_count = 5;
  void clear_op_count();
  ::PROTOBUF_NAMESPACE_ID::int64 op_count() const;
  void set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_op_count() const;
  void _internal_set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.KvOpPair)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int op_type_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int64 op_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class ClientOperationReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.ClientOperationReq) */ {
 public:
  ClientOperationReq();
  virtual ~ClientOperationReq();

  ClientOperationReq(const ClientOperationReq& from);
  ClientOperationReq(ClientOperationReq&& from) noexcept
    : ClientOperationReq() {
    *this = ::std::move(from);
  }

  inline ClientOperationReq& operator=(const ClientOperationReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientOperationReq& operator=(ClientOperationReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientOperationReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientOperationReq* internal_default_instance() {
    return reinterpret_cast<const ClientOperationReq*>(
               &_ClientOperationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ClientOperationReq& a, ClientOperationReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientOperationReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientOperationReq* New() const final {
    return CreateMaybeMessage<ClientOperationReq>(nullptr);
  }

  ClientOperationReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientOperationReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientOperationReq& from);
  void MergeFrom(const ClientOperationReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientOperationReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.ClientOperationReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 2,
    kOpTimestampFieldNumber = 1,
  };
  // repeated .eraftkv.KvOpPair kvs = 2;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::eraftkv::KvOpPair* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >*
      mutable_kvs();
  private:
  const ::eraftkv::KvOpPair& _internal_kvs(int index) const;
  ::eraftkv::KvOpPair* _internal_add_kvs();
  public:
  const ::eraftkv::KvOpPair& kvs(int index) const;
  ::eraftkv::KvOpPair* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >&
      kvs() const;

  // uint64 op_timestamp = 1;
  void clear_op_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 op_timestamp() const;
  void set_op_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_op_timestamp() const;
  void _internal_set_op_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:eraftkv.ClientOperationReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair > kvs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 op_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// -------------------------------------------------------------------

class ClientOperationResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftkv.ClientOperationResp) */ {
 public:
  ClientOperationResp();
  virtual ~ClientOperationResp();

  ClientOperationResp(const ClientOperationResp& from);
  ClientOperationResp(ClientOperationResp&& from) noexcept
    : ClientOperationResp() {
    *this = ::std::move(from);
  }

  inline ClientOperationResp& operator=(const ClientOperationResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientOperationResp& operator=(ClientOperationResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientOperationResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientOperationResp* internal_default_instance() {
    return reinterpret_cast<const ClientOperationResp*>(
               &_ClientOperationResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ClientOperationResp& a, ClientOperationResp& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientOperationResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientOperationResp* New() const final {
    return CreateMaybeMessage<ClientOperationResp>(nullptr);
  }

  ClientOperationResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientOperationResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientOperationResp& from);
  void MergeFrom(const ClientOperationResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientOperationResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftkv.ClientOperationResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftkv_2eproto);
    return ::descriptor_table_eraftkv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 2,
  };
  // repeated .eraftkv.KvOpPair ops = 2;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::eraftkv::KvOpPair* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >*
      mutable_ops();
  private:
  const ::eraftkv::KvOpPair& _internal_ops(int index) const;
  ::eraftkv::KvOpPair* _internal_add_ops();
  public:
  const ::eraftkv::KvOpPair& ops(int index) const;
  ::eraftkv::KvOpPair* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >&
      ops() const;

  // @@protoc_insertion_point(class_scope:eraftkv.ClientOperationResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair > ops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftkv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteReq

// bool prevote = 1;
inline void RequestVoteReq::clear_prevote() {
  prevote_ = false;
}
inline bool RequestVoteReq::_internal_prevote() const {
  return prevote_;
}
inline bool RequestVoteReq::prevote() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteReq.prevote)
  return _internal_prevote();
}
inline void RequestVoteReq::_internal_set_prevote(bool value) {
  
  prevote_ = value;
}
inline void RequestVoteReq::set_prevote(bool value) {
  _internal_set_prevote(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteReq.prevote)
}

// int64 term = 2;
inline void RequestVoteReq::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::term() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteReq.term)
  return _internal_term();
}
inline void RequestVoteReq::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void RequestVoteReq::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteReq.term)
}

// int64 candidtate_id = 3;
inline void RequestVoteReq::clear_candidtate_id() {
  candidtate_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::_internal_candidtate_id() const {
  return candidtate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::candidtate_id() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteReq.candidtate_id)
  return _internal_candidtate_id();
}
inline void RequestVoteReq::_internal_set_candidtate_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  candidtate_id_ = value;
}
inline void RequestVoteReq::set_candidtate_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_candidtate_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteReq.candidtate_id)
}

// int64 last_log_idx = 4;
inline void RequestVoteReq::clear_last_log_idx() {
  last_log_idx_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::_internal_last_log_idx() const {
  return last_log_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::last_log_idx() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteReq.last_log_idx)
  return _internal_last_log_idx();
}
inline void RequestVoteReq::_internal_set_last_log_idx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_log_idx_ = value;
}
inline void RequestVoteReq::set_last_log_idx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_log_idx(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteReq.last_log_idx)
}

// int64 last_log_term = 5;
inline void RequestVoteReq::clear_last_log_term() {
  last_log_term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::_internal_last_log_term() const {
  return last_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteReq::last_log_term() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteReq.last_log_term)
  return _internal_last_log_term();
}
inline void RequestVoteReq::_internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_log_term_ = value;
}
inline void RequestVoteReq::set_last_log_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteReq.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteResp

// bool prevote = 1;
inline void RequestVoteResp::clear_prevote() {
  prevote_ = false;
}
inline bool RequestVoteResp::_internal_prevote() const {
  return prevote_;
}
inline bool RequestVoteResp::prevote() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteResp.prevote)
  return _internal_prevote();
}
inline void RequestVoteResp::_internal_set_prevote(bool value) {
  
  prevote_ = value;
}
inline void RequestVoteResp::set_prevote(bool value) {
  _internal_set_prevote(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteResp.prevote)
}

// int64 request_term = 2;
inline void RequestVoteResp::clear_request_term() {
  request_term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResp::_internal_request_term() const {
  return request_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResp::request_term() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteResp.request_term)
  return _internal_request_term();
}
inline void RequestVoteResp::_internal_set_request_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  request_term_ = value;
}
inline void RequestVoteResp::set_request_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_request_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteResp.request_term)
}

// int64 term = 3;
inline void RequestVoteResp::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResp::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResp::term() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteResp.term)
  return _internal_term();
}
inline void RequestVoteResp::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void RequestVoteResp::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteResp.term)
}

// bool vote_granted = 4;
inline void RequestVoteResp::clear_vote_granted() {
  vote_granted_ = false;
}
inline bool RequestVoteResp::_internal_vote_granted() const {
  return vote_granted_;
}
inline bool RequestVoteResp::vote_granted() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteResp.vote_granted)
  return _internal_vote_granted();
}
inline void RequestVoteResp::_internal_set_vote_granted(bool value) {
  
  vote_granted_ = value;
}
inline void RequestVoteResp::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteResp.vote_granted)
}

// int64 leader_id = 5;
inline void RequestVoteResp::clear_leader_id() {
  leader_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResp::_internal_leader_id() const {
  return leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteResp::leader_id() const {
  // @@protoc_insertion_point(field_get:eraftkv.RequestVoteResp.leader_id)
  return _internal_leader_id();
}
inline void RequestVoteResp::_internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leader_id_ = value;
}
inline void RequestVoteResp::set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.RequestVoteResp.leader_id)
}

// -------------------------------------------------------------------

// Entry

// int64 term = 1;
inline void Entry::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::term() const {
  // @@protoc_insertion_point(field_get:eraftkv.Entry.term)
  return _internal_term();
}
inline void Entry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void Entry::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.Entry.term)
}

// int64 id = 2;
inline void Entry::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::id() const {
  // @@protoc_insertion_point(field_get:eraftkv.Entry.id)
  return _internal_id();
}
inline void Entry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Entry::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.Entry.id)
}

// .eraftkv.EntryType e_type = 3;
inline void Entry::clear_e_type() {
  e_type_ = 0;
}
inline ::eraftkv::EntryType Entry::_internal_e_type() const {
  return static_cast< ::eraftkv::EntryType >(e_type_);
}
inline ::eraftkv::EntryType Entry::e_type() const {
  // @@protoc_insertion_point(field_get:eraftkv.Entry.e_type)
  return _internal_e_type();
}
inline void Entry::_internal_set_e_type(::eraftkv::EntryType value) {
  
  e_type_ = value;
}
inline void Entry::set_e_type(::eraftkv::EntryType value) {
  _internal_set_e_type(value);
  // @@protoc_insertion_point(field_set:eraftkv.Entry.e_type)
}

// int64 data_size = 4;
inline void Entry::clear_data_size() {
  data_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::_internal_data_size() const {
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::data_size() const {
  // @@protoc_insertion_point(field_get:eraftkv.Entry.data_size)
  return _internal_data_size();
}
inline void Entry::_internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_size_ = value;
}
inline void Entry::set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:eraftkv.Entry.data_size)
}

// bytes data = 5;
inline void Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:eraftkv.Entry.data)
  return _internal_data();
}
inline void Entry::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:eraftkv.Entry.data)
}
inline std::string* Entry::mutable_data() {
  // @@protoc_insertion_point(field_mutable:eraftkv.Entry.data)
  return _internal_mutable_data();
}
inline const std::string& Entry::_internal_data() const {
  return data_.GetNoArena();
}
inline void Entry::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Entry::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.Entry.data)
}
inline void Entry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.Entry.data)
}
inline void Entry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.Entry.data)
}
inline std::string* Entry::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:eraftkv.Entry.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.Entry.data)
}

// -------------------------------------------------------------------

// AppendEntriesReq

// int64 leader_id = 1;
inline void AppendEntriesReq::clear_leader_id() {
  leader_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::_internal_leader_id() const {
  return leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::leader_id() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.leader_id)
  return _internal_leader_id();
}
inline void AppendEntriesReq::_internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leader_id_ = value;
}
inline void AppendEntriesReq::set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesReq.leader_id)
}

// int64 message_index = 2;
inline void AppendEntriesReq::clear_message_index() {
  message_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::_internal_message_index() const {
  return message_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::message_index() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.message_index)
  return _internal_message_index();
}
inline void AppendEntriesReq::_internal_set_message_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_index_ = value;
}
inline void AppendEntriesReq::set_message_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_index(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesReq.message_index)
}

// int64 term = 3;
inline void AppendEntriesReq::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::term() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.term)
  return _internal_term();
}
inline void AppendEntriesReq::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void AppendEntriesReq::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesReq.term)
}

// int64 prev_log_index = 4;
inline void AppendEntriesReq::clear_prev_log_index() {
  prev_log_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::_internal_prev_log_index() const {
  return prev_log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::prev_log_index() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.prev_log_index)
  return _internal_prev_log_index();
}
inline void AppendEntriesReq::_internal_set_prev_log_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  prev_log_index_ = value;
}
inline void AppendEntriesReq::set_prev_log_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prev_log_index(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesReq.prev_log_index)
}

// int64 prev_log_term = 5;
inline void AppendEntriesReq::clear_prev_log_term() {
  prev_log_term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::_internal_prev_log_term() const {
  return prev_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::prev_log_term() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.prev_log_term)
  return _internal_prev_log_term();
}
inline void AppendEntriesReq::_internal_set_prev_log_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  prev_log_term_ = value;
}
inline void AppendEntriesReq::set_prev_log_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_prev_log_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesReq.prev_log_term)
}

// int64 leader_commit = 6;
inline void AppendEntriesReq::clear_leader_commit() {
  leader_commit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::_internal_leader_commit() const {
  return leader_commit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesReq::leader_commit() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.leader_commit)
  return _internal_leader_commit();
}
inline void AppendEntriesReq::_internal_set_leader_commit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leader_commit_ = value;
}
inline void AppendEntriesReq::set_leader_commit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesReq.leader_commit)
}

// bool is_heartbeat = 7;
inline void AppendEntriesReq::clear_is_heartbeat() {
  is_heartbeat_ = false;
}
inline bool AppendEntriesReq::_internal_is_heartbeat() const {
  return is_heartbeat_;
}
inline bool AppendEntriesReq::is_heartbeat() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.is_heartbeat)
  return _internal_is_heartbeat();
}
inline void AppendEntriesReq::_internal_set_is_heartbeat(bool value) {
  
  is_heartbeat_ = value;
}
inline void AppendEntriesReq::set_is_heartbeat(bool value) {
  _internal_set_is_heartbeat(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesReq.is_heartbeat)
}

// repeated .eraftkv.Entry entries = 8;
inline int AppendEntriesReq::_internal_entries_size() const {
  return entries_.size();
}
inline int AppendEntriesReq::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesReq::clear_entries() {
  entries_.Clear();
}
inline ::eraftkv::Entry* AppendEntriesReq::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:eraftkv.AppendEntriesReq.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Entry >*
AppendEntriesReq::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:eraftkv.AppendEntriesReq.entries)
  return &entries_;
}
inline const ::eraftkv::Entry& AppendEntriesReq::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::eraftkv::Entry& AppendEntriesReq::entries(int index) const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesReq.entries)
  return _internal_entries(index);
}
inline ::eraftkv::Entry* AppendEntriesReq::_internal_add_entries() {
  return entries_.Add();
}
inline ::eraftkv::Entry* AppendEntriesReq::add_entries() {
  // @@protoc_insertion_point(field_add:eraftkv.AppendEntriesReq.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Entry >&
AppendEntriesReq::entries() const {
  // @@protoc_insertion_point(field_list:eraftkv.AppendEntriesReq.entries)
  return entries_;
}

// -------------------------------------------------------------------

// AppendEntriesResp

// string message_token = 1;
inline void AppendEntriesResp::clear_message_token() {
  message_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AppendEntriesResp::message_token() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesResp.message_token)
  return _internal_message_token();
}
inline void AppendEntriesResp::set_message_token(const std::string& value) {
  _internal_set_message_token(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesResp.message_token)
}
inline std::string* AppendEntriesResp::mutable_message_token() {
  // @@protoc_insertion_point(field_mutable:eraftkv.AppendEntriesResp.message_token)
  return _internal_mutable_message_token();
}
inline const std::string& AppendEntriesResp::_internal_message_token() const {
  return message_token_.GetNoArena();
}
inline void AppendEntriesResp::_internal_set_message_token(const std::string& value) {
  
  message_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AppendEntriesResp::set_message_token(std::string&& value) {
  
  message_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.AppendEntriesResp.message_token)
}
inline void AppendEntriesResp::set_message_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.AppendEntriesResp.message_token)
}
inline void AppendEntriesResp::set_message_token(const char* value, size_t size) {
  
  message_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.AppendEntriesResp.message_token)
}
inline std::string* AppendEntriesResp::_internal_mutable_message_token() {
  
  return message_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesResp::release_message_token() {
  // @@protoc_insertion_point(field_release:eraftkv.AppendEntriesResp.message_token)
  
  return message_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesResp::set_allocated_message_token(std::string* message_token) {
  if (message_token != nullptr) {
    
  } else {
    
  }
  message_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_token);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.AppendEntriesResp.message_token)
}

// int64 term = 2;
inline void AppendEntriesResp::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::term() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesResp.term)
  return _internal_term();
}
inline void AppendEntriesResp::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void AppendEntriesResp::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesResp.term)
}

// bool success = 3;
inline void AppendEntriesResp::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResp::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResp::success() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesResp.success)
  return _internal_success();
}
inline void AppendEntriesResp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesResp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesResp.success)
}

// int64 current_index = 4;
inline void AppendEntriesResp::clear_current_index() {
  current_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::_internal_current_index() const {
  return current_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::current_index() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesResp.current_index)
  return _internal_current_index();
}
inline void AppendEntriesResp::_internal_set_current_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  current_index_ = value;
}
inline void AppendEntriesResp::set_current_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_current_index(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesResp.current_index)
}

// int64 conflict_index = 5;
inline void AppendEntriesResp::clear_conflict_index() {
  conflict_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::_internal_conflict_index() const {
  return conflict_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::conflict_index() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesResp.conflict_index)
  return _internal_conflict_index();
}
inline void AppendEntriesResp::_internal_set_conflict_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  conflict_index_ = value;
}
inline void AppendEntriesResp::set_conflict_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_conflict_index(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesResp.conflict_index)
}

// int64 conflict_term = 6;
inline void AppendEntriesResp::clear_conflict_term() {
  conflict_term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::_internal_conflict_term() const {
  return conflict_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResp::conflict_term() const {
  // @@protoc_insertion_point(field_get:eraftkv.AppendEntriesResp.conflict_term)
  return _internal_conflict_term();
}
inline void AppendEntriesResp::_internal_set_conflict_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  conflict_term_ = value;
}
inline void AppendEntriesResp::set_conflict_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_conflict_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.AppendEntriesResp.conflict_term)
}

// -------------------------------------------------------------------

// SnapshotBlock

// int64 offset = 1;
inline void SnapshotBlock::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotBlock::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotBlock::offset() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotBlock.offset)
  return _internal_offset();
}
inline void SnapshotBlock::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void SnapshotBlock::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotBlock.offset)
}

// bytes data = 2;
inline void SnapshotBlock::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotBlock::data() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotBlock.data)
  return _internal_data();
}
inline void SnapshotBlock::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotBlock.data)
}
inline std::string* SnapshotBlock::mutable_data() {
  // @@protoc_insertion_point(field_mutable:eraftkv.SnapshotBlock.data)
  return _internal_mutable_data();
}
inline const std::string& SnapshotBlock::_internal_data() const {
  return data_.GetNoArena();
}
inline void SnapshotBlock::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SnapshotBlock::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.SnapshotBlock.data)
}
inline void SnapshotBlock::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.SnapshotBlock.data)
}
inline void SnapshotBlock::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.SnapshotBlock.data)
}
inline std::string* SnapshotBlock::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotBlock::release_data() {
  // @@protoc_insertion_point(field_release:eraftkv.SnapshotBlock.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotBlock::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.SnapshotBlock.data)
}

// int64 block_size = 3;
inline void SnapshotBlock::clear_block_size() {
  block_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotBlock::_internal_block_size() const {
  return block_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotBlock::block_size() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotBlock.block_size)
  return _internal_block_size();
}
inline void SnapshotBlock::_internal_set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  block_size_ = value;
}
inline void SnapshotBlock::set_block_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotBlock.block_size)
}

// bool is_last_chunk = 4;
inline void SnapshotBlock::clear_is_last_chunk() {
  is_last_chunk_ = false;
}
inline bool SnapshotBlock::_internal_is_last_chunk() const {
  return is_last_chunk_;
}
inline bool SnapshotBlock::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotBlock.is_last_chunk)
  return _internal_is_last_chunk();
}
inline void SnapshotBlock::_internal_set_is_last_chunk(bool value) {
  
  is_last_chunk_ = value;
}
inline void SnapshotBlock::set_is_last_chunk(bool value) {
  _internal_set_is_last_chunk(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotBlock.is_last_chunk)
}

// -------------------------------------------------------------------

// SnapshotReq

// int64 term = 1;
inline void SnapshotReq::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::term() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotReq.term)
  return _internal_term();
}
inline void SnapshotReq::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void SnapshotReq::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotReq.term)
}

// int64 leader_id = 2;
inline void SnapshotReq::clear_leader_id() {
  leader_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::_internal_leader_id() const {
  return leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::leader_id() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotReq.leader_id)
  return _internal_leader_id();
}
inline void SnapshotReq::_internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  leader_id_ = value;
}
inline void SnapshotReq::set_leader_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotReq.leader_id)
}

// string message_index = 3;
inline void SnapshotReq::clear_message_index() {
  message_index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotReq::message_index() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotReq.message_index)
  return _internal_message_index();
}
inline void SnapshotReq::set_message_index(const std::string& value) {
  _internal_set_message_index(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotReq.message_index)
}
inline std::string* SnapshotReq::mutable_message_index() {
  // @@protoc_insertion_point(field_mutable:eraftkv.SnapshotReq.message_index)
  return _internal_mutable_message_index();
}
inline const std::string& SnapshotReq::_internal_message_index() const {
  return message_index_.GetNoArena();
}
inline void SnapshotReq::_internal_set_message_index(const std::string& value) {
  
  message_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SnapshotReq::set_message_index(std::string&& value) {
  
  message_index_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.SnapshotReq.message_index)
}
inline void SnapshotReq::set_message_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.SnapshotReq.message_index)
}
inline void SnapshotReq::set_message_index(const char* value, size_t size) {
  
  message_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.SnapshotReq.message_index)
}
inline std::string* SnapshotReq::_internal_mutable_message_index() {
  
  return message_index_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotReq::release_message_index() {
  // @@protoc_insertion_point(field_release:eraftkv.SnapshotReq.message_index)
  
  return message_index_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotReq::set_allocated_message_index(std::string* message_index) {
  if (message_index != nullptr) {
    
  } else {
    
  }
  message_index_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_index);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.SnapshotReq.message_index)
}

// int64 snapshot_index = 4;
inline void SnapshotReq::clear_snapshot_index() {
  snapshot_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::_internal_snapshot_index() const {
  return snapshot_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::snapshot_index() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotReq.snapshot_index)
  return _internal_snapshot_index();
}
inline void SnapshotReq::_internal_set_snapshot_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  snapshot_index_ = value;
}
inline void SnapshotReq::set_snapshot_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_snapshot_index(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotReq.snapshot_index)
}

// int64 snapshot_term = 5;
inline void SnapshotReq::clear_snapshot_term() {
  snapshot_term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::_internal_snapshot_term() const {
  return snapshot_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotReq::snapshot_term() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotReq.snapshot_term)
  return _internal_snapshot_term();
}
inline void SnapshotReq::_internal_set_snapshot_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  snapshot_term_ = value;
}
inline void SnapshotReq::set_snapshot_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_snapshot_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotReq.snapshot_term)
}

// .eraftkv.SnapshotBlock block = 6;
inline bool SnapshotReq::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool SnapshotReq::has_block() const {
  return _internal_has_block();
}
inline void SnapshotReq::clear_block() {
  if (GetArenaNoVirtual() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::eraftkv::SnapshotBlock& SnapshotReq::_internal_block() const {
  const ::eraftkv::SnapshotBlock* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eraftkv::SnapshotBlock*>(
      &::eraftkv::_SnapshotBlock_default_instance_);
}
inline const ::eraftkv::SnapshotBlock& SnapshotReq::block() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotReq.block)
  return _internal_block();
}
inline ::eraftkv::SnapshotBlock* SnapshotReq::release_block() {
  // @@protoc_insertion_point(field_release:eraftkv.SnapshotReq.block)
  
  ::eraftkv::SnapshotBlock* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::eraftkv::SnapshotBlock* SnapshotReq::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftkv::SnapshotBlock>(GetArenaNoVirtual());
    block_ = p;
  }
  return block_;
}
inline ::eraftkv::SnapshotBlock* SnapshotReq::mutable_block() {
  // @@protoc_insertion_point(field_mutable:eraftkv.SnapshotReq.block)
  return _internal_mutable_block();
}
inline void SnapshotReq::set_allocated_block(::eraftkv::SnapshotBlock* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:eraftkv.SnapshotReq.block)
}

// -------------------------------------------------------------------

// SnapshotResp

// int64 term = 1;
inline void SnapshotResp::clear_term() {
  term_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotResp::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotResp::term() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotResp.term)
  return _internal_term();
}
inline void SnapshotResp::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  term_ = value;
}
inline void SnapshotResp::set_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotResp.term)
}

// string message_index = 2;
inline void SnapshotResp::clear_message_index() {
  message_index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SnapshotResp::message_index() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotResp.message_index)
  return _internal_message_index();
}
inline void SnapshotResp::set_message_index(const std::string& value) {
  _internal_set_message_index(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotResp.message_index)
}
inline std::string* SnapshotResp::mutable_message_index() {
  // @@protoc_insertion_point(field_mutable:eraftkv.SnapshotResp.message_index)
  return _internal_mutable_message_index();
}
inline const std::string& SnapshotResp::_internal_message_index() const {
  return message_index_.GetNoArena();
}
inline void SnapshotResp::_internal_set_message_index(const std::string& value) {
  
  message_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SnapshotResp::set_message_index(std::string&& value) {
  
  message_index_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.SnapshotResp.message_index)
}
inline void SnapshotResp::set_message_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.SnapshotResp.message_index)
}
inline void SnapshotResp::set_message_index(const char* value, size_t size) {
  
  message_index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.SnapshotResp.message_index)
}
inline std::string* SnapshotResp::_internal_mutable_message_index() {
  
  return message_index_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnapshotResp::release_message_index() {
  // @@protoc_insertion_point(field_release:eraftkv.SnapshotResp.message_index)
  
  return message_index_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotResp::set_allocated_message_index(std::string* message_index) {
  if (message_index != nullptr) {
    
  } else {
    
  }
  message_index_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_index);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.SnapshotResp.message_index)
}

// int64 offset = 3;
inline void SnapshotResp::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotResp::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnapshotResp::offset() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotResp.offset)
  return _internal_offset();
}
inline void SnapshotResp::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void SnapshotResp::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotResp.offset)
}

// bool success = 4;
inline void SnapshotResp::clear_success() {
  success_ = false;
}
inline bool SnapshotResp::_internal_success() const {
  return success_;
}
inline bool SnapshotResp::success() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotResp.success)
  return _internal_success();
}
inline void SnapshotResp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SnapshotResp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotResp.success)
}

// bool is_last_chunk = 5;
inline void SnapshotResp::clear_is_last_chunk() {
  is_last_chunk_ = false;
}
inline bool SnapshotResp::_internal_is_last_chunk() const {
  return is_last_chunk_;
}
inline bool SnapshotResp::is_last_chunk() const {
  // @@protoc_insertion_point(field_get:eraftkv.SnapshotResp.is_last_chunk)
  return _internal_is_last_chunk();
}
inline void SnapshotResp::_internal_set_is_last_chunk(bool value) {
  
  is_last_chunk_ = value;
}
inline void SnapshotResp::set_is_last_chunk(bool value) {
  _internal_set_is_last_chunk(value);
  // @@protoc_insertion_point(field_set:eraftkv.SnapshotResp.is_last_chunk)
}

// -------------------------------------------------------------------

// KeyRange

// .eraftkv.KeyRangeStatus key_range_status = 1;
inline void KeyRange::clear_key_range_status() {
  key_range_status_ = 0;
}
inline ::eraftkv::KeyRangeStatus KeyRange::_internal_key_range_status() const {
  return static_cast< ::eraftkv::KeyRangeStatus >(key_range_status_);
}
inline ::eraftkv::KeyRangeStatus KeyRange::key_range_status() const {
  // @@protoc_insertion_point(field_get:eraftkv.KeyRange.key_range_status)
  return _internal_key_range_status();
}
inline void KeyRange::_internal_set_key_range_status(::eraftkv::KeyRangeStatus value) {
  
  key_range_status_ = value;
}
inline void KeyRange::set_key_range_status(::eraftkv::KeyRangeStatus value) {
  _internal_set_key_range_status(value);
  // @@protoc_insertion_point(field_set:eraftkv.KeyRange.key_range_status)
}

// int64 shard_id = 2;
inline void KeyRange::clear_shard_id() {
  shard_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyRange::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyRange::shard_id() const {
  // @@protoc_insertion_point(field_get:eraftkv.KeyRange.shard_id)
  return _internal_shard_id();
}
inline void KeyRange::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shard_id_ = value;
}
inline void KeyRange::set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.KeyRange.shard_id)
}

// int64 status_modify_time = 3;
inline void KeyRange::clear_status_modify_time() {
  status_modify_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyRange::_internal_status_modify_time() const {
  return status_modify_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyRange::status_modify_time() const {
  // @@protoc_insertion_point(field_get:eraftkv.KeyRange.status_modify_time)
  return _internal_status_modify_time();
}
inline void KeyRange::_internal_set_status_modify_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  status_modify_time_ = value;
}
inline void KeyRange::set_status_modify_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_status_modify_time(value);
  // @@protoc_insertion_point(field_set:eraftkv.KeyRange.status_modify_time)
}

// string start = 4;
inline void KeyRange::clear_start() {
  start_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyRange::start() const {
  // @@protoc_insertion_point(field_get:eraftkv.KeyRange.start)
  return _internal_start();
}
inline void KeyRange::set_start(const std::string& value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:eraftkv.KeyRange.start)
}
inline std::string* KeyRange::mutable_start() {
  // @@protoc_insertion_point(field_mutable:eraftkv.KeyRange.start)
  return _internal_mutable_start();
}
inline const std::string& KeyRange::_internal_start() const {
  return start_.GetNoArena();
}
inline void KeyRange::_internal_set_start(const std::string& value) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyRange::set_start(std::string&& value) {
  
  start_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.KeyRange.start)
}
inline void KeyRange::set_start(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.KeyRange.start)
}
inline void KeyRange::set_start(const char* value, size_t size) {
  
  start_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.KeyRange.start)
}
inline std::string* KeyRange::_internal_mutable_start() {
  
  return start_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyRange::release_start() {
  // @@protoc_insertion_point(field_release:eraftkv.KeyRange.start)
  
  return start_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyRange::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.KeyRange.start)
}

// string end = 5;
inline void KeyRange::clear_end() {
  end_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyRange::end() const {
  // @@protoc_insertion_point(field_get:eraftkv.KeyRange.end)
  return _internal_end();
}
inline void KeyRange::set_end(const std::string& value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:eraftkv.KeyRange.end)
}
inline std::string* KeyRange::mutable_end() {
  // @@protoc_insertion_point(field_mutable:eraftkv.KeyRange.end)
  return _internal_mutable_end();
}
inline const std::string& KeyRange::_internal_end() const {
  return end_.GetNoArena();
}
inline void KeyRange::_internal_set_end(const std::string& value) {
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyRange::set_end(std::string&& value) {
  
  end_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.KeyRange.end)
}
inline void KeyRange::set_end(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.KeyRange.end)
}
inline void KeyRange::set_end(const char* value, size_t size) {
  
  end_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.KeyRange.end)
}
inline std::string* KeyRange::_internal_mutable_end() {
  
  return end_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyRange::release_end() {
  // @@protoc_insertion_point(field_release:eraftkv.KeyRange.end)
  
  return end_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyRange::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.KeyRange.end)
}

// -------------------------------------------------------------------

// Server

// int64 id = 1;
inline void Server::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Server::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Server::id() const {
  // @@protoc_insertion_point(field_get:eraftkv.Server.id)
  return _internal_id();
}
inline void Server::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Server::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.Server.id)
}

// string address = 2;
inline void Server::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::address() const {
  // @@protoc_insertion_point(field_get:eraftkv.Server.address)
  return _internal_address();
}
inline void Server::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:eraftkv.Server.address)
}
inline std::string* Server::mutable_address() {
  // @@protoc_insertion_point(field_mutable:eraftkv.Server.address)
  return _internal_mutable_address();
}
inline const std::string& Server::_internal_address() const {
  return address_.GetNoArena();
}
inline void Server::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.Server.address)
}
inline void Server::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.Server.address)
}
inline void Server::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.Server.address)
}
inline std::string* Server::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_address() {
  // @@protoc_insertion_point(field_release:eraftkv.Server.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.Server.address)
}

// .eraftkv.ServerStatus server_status = 3;
inline void Server::clear_server_status() {
  server_status_ = 0;
}
inline ::eraftkv::ServerStatus Server::_internal_server_status() const {
  return static_cast< ::eraftkv::ServerStatus >(server_status_);
}
inline ::eraftkv::ServerStatus Server::server_status() const {
  // @@protoc_insertion_point(field_get:eraftkv.Server.server_status)
  return _internal_server_status();
}
inline void Server::_internal_set_server_status(::eraftkv::ServerStatus value) {
  
  server_status_ = value;
}
inline void Server::set_server_status(::eraftkv::ServerStatus value) {
  _internal_set_server_status(value);
  // @@protoc_insertion_point(field_set:eraftkv.Server.server_status)
}

// -------------------------------------------------------------------

// ShardGroup

// int64 id = 1;
inline void ShardGroup::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardGroup::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShardGroup::id() const {
  // @@protoc_insertion_point(field_get:eraftkv.ShardGroup.id)
  return _internal_id();
}
inline void ShardGroup::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void ShardGroup::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.ShardGroup.id)
}

// .eraftkv.KeyRange key_range = 2;
inline bool ShardGroup::_internal_has_key_range() const {
  return this != internal_default_instance() && key_range_ != nullptr;
}
inline bool ShardGroup::has_key_range() const {
  return _internal_has_key_range();
}
inline void ShardGroup::clear_key_range() {
  if (GetArenaNoVirtual() == nullptr && key_range_ != nullptr) {
    delete key_range_;
  }
  key_range_ = nullptr;
}
inline const ::eraftkv::KeyRange& ShardGroup::_internal_key_range() const {
  const ::eraftkv::KeyRange* p = key_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eraftkv::KeyRange*>(
      &::eraftkv::_KeyRange_default_instance_);
}
inline const ::eraftkv::KeyRange& ShardGroup::key_range() const {
  // @@protoc_insertion_point(field_get:eraftkv.ShardGroup.key_range)
  return _internal_key_range();
}
inline ::eraftkv::KeyRange* ShardGroup::release_key_range() {
  // @@protoc_insertion_point(field_release:eraftkv.ShardGroup.key_range)
  
  ::eraftkv::KeyRange* temp = key_range_;
  key_range_ = nullptr;
  return temp;
}
inline ::eraftkv::KeyRange* ShardGroup::_internal_mutable_key_range() {
  
  if (key_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftkv::KeyRange>(GetArenaNoVirtual());
    key_range_ = p;
  }
  return key_range_;
}
inline ::eraftkv::KeyRange* ShardGroup::mutable_key_range() {
  // @@protoc_insertion_point(field_mutable:eraftkv.ShardGroup.key_range)
  return _internal_mutable_key_range();
}
inline void ShardGroup::set_allocated_key_range(::eraftkv::KeyRange* key_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete key_range_;
  }
  if (key_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_range, submessage_arena);
    }
    
  } else {
    
  }
  key_range_ = key_range;
  // @@protoc_insertion_point(field_set_allocated:eraftkv.ShardGroup.key_range)
}

// repeated .eraftkv.Server servers = 3;
inline int ShardGroup::_internal_servers_size() const {
  return servers_.size();
}
inline int ShardGroup::servers_size() const {
  return _internal_servers_size();
}
inline void ShardGroup::clear_servers() {
  servers_.Clear();
}
inline ::eraftkv::Server* ShardGroup::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:eraftkv.ShardGroup.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Server >*
ShardGroup::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:eraftkv.ShardGroup.servers)
  return &servers_;
}
inline const ::eraftkv::Server& ShardGroup::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::eraftkv::Server& ShardGroup::servers(int index) const {
  // @@protoc_insertion_point(field_get:eraftkv.ShardGroup.servers)
  return _internal_servers(index);
}
inline ::eraftkv::Server* ShardGroup::_internal_add_servers() {
  return servers_.Add();
}
inline ::eraftkv::Server* ShardGroup::add_servers() {
  // @@protoc_insertion_point(field_add:eraftkv.ShardGroup.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::Server >&
ShardGroup::servers() const {
  // @@protoc_insertion_point(field_list:eraftkv.ShardGroup.servers)
  return servers_;
}

// -------------------------------------------------------------------

// ClusterConfigChangeReq

// .eraftkv.ClusterConfigChangeType change_type = 1;
inline void ClusterConfigChangeReq::clear_change_type() {
  change_type_ = 0;
}
inline ::eraftkv::ClusterConfigChangeType ClusterConfigChangeReq::_internal_change_type() const {
  return static_cast< ::eraftkv::ClusterConfigChangeType >(change_type_);
}
inline ::eraftkv::ClusterConfigChangeType ClusterConfigChangeReq::change_type() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeReq.change_type)
  return _internal_change_type();
}
inline void ClusterConfigChangeReq::_internal_set_change_type(::eraftkv::ClusterConfigChangeType value) {
  
  change_type_ = value;
}
inline void ClusterConfigChangeReq::set_change_type(::eraftkv::ClusterConfigChangeType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:eraftkv.ClusterConfigChangeReq.change_type)
}

// int64 shard_id = 2;
inline void ClusterConfigChangeReq::clear_shard_id() {
  shard_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeReq::_internal_shard_id() const {
  return shard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeReq::shard_id() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeReq.shard_id)
  return _internal_shard_id();
}
inline void ClusterConfigChangeReq::_internal_set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shard_id_ = value;
}
inline void ClusterConfigChangeReq::set_shard_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_shard_id(value);
  // @@protoc_insertion_point(field_set:eraftkv.ClusterConfigChangeReq.shard_id)
}

// .eraftkv.Server server = 3;
inline bool ClusterConfigChangeReq::_internal_has_server() const {
  return this != internal_default_instance() && server_ != nullptr;
}
inline bool ClusterConfigChangeReq::has_server() const {
  return _internal_has_server();
}
inline void ClusterConfigChangeReq::clear_server() {
  if (GetArenaNoVirtual() == nullptr && server_ != nullptr) {
    delete server_;
  }
  server_ = nullptr;
}
inline const ::eraftkv::Server& ClusterConfigChangeReq::_internal_server() const {
  const ::eraftkv::Server* p = server_;
  return p != nullptr ? *p : *reinterpret_cast<const ::eraftkv::Server*>(
      &::eraftkv::_Server_default_instance_);
}
inline const ::eraftkv::Server& ClusterConfigChangeReq::server() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeReq.server)
  return _internal_server();
}
inline ::eraftkv::Server* ClusterConfigChangeReq::release_server() {
  // @@protoc_insertion_point(field_release:eraftkv.ClusterConfigChangeReq.server)
  
  ::eraftkv::Server* temp = server_;
  server_ = nullptr;
  return temp;
}
inline ::eraftkv::Server* ClusterConfigChangeReq::_internal_mutable_server() {
  
  if (server_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftkv::Server>(GetArenaNoVirtual());
    server_ = p;
  }
  return server_;
}
inline ::eraftkv::Server* ClusterConfigChangeReq::mutable_server() {
  // @@protoc_insertion_point(field_mutable:eraftkv.ClusterConfigChangeReq.server)
  return _internal_mutable_server();
}
inline void ClusterConfigChangeReq::set_allocated_server(::eraftkv::Server* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_;
  }
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:eraftkv.ClusterConfigChangeReq.server)
}

// int64 config_version = 4;
inline void ClusterConfigChangeReq::clear_config_version() {
  config_version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeReq::_internal_config_version() const {
  return config_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeReq::config_version() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeReq.config_version)
  return _internal_config_version();
}
inline void ClusterConfigChangeReq::_internal_set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  config_version_ = value;
}
inline void ClusterConfigChangeReq::set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_config_version(value);
  // @@protoc_insertion_point(field_set:eraftkv.ClusterConfigChangeReq.config_version)
}

// int64 op_count = 5;
inline void ClusterConfigChangeReq::clear_op_count() {
  op_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeReq::_internal_op_count() const {
  return op_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeReq::op_count() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeReq.op_count)
  return _internal_op_count();
}
inline void ClusterConfigChangeReq::_internal_set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  op_count_ = value;
}
inline void ClusterConfigChangeReq::set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_op_count(value);
  // @@protoc_insertion_point(field_set:eraftkv.ClusterConfigChangeReq.op_count)
}

// -------------------------------------------------------------------

// ClusterConfigChangeResp

// bool success = 1;
inline void ClusterConfigChangeResp::clear_success() {
  success_ = false;
}
inline bool ClusterConfigChangeResp::_internal_success() const {
  return success_;
}
inline bool ClusterConfigChangeResp::success() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeResp.success)
  return _internal_success();
}
inline void ClusterConfigChangeResp::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ClusterConfigChangeResp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:eraftkv.ClusterConfigChangeResp.success)
}

// repeated .eraftkv.ShardGroup shard_group = 2;
inline int ClusterConfigChangeResp::_internal_shard_group_size() const {
  return shard_group_.size();
}
inline int ClusterConfigChangeResp::shard_group_size() const {
  return _internal_shard_group_size();
}
inline void ClusterConfigChangeResp::clear_shard_group() {
  shard_group_.Clear();
}
inline ::eraftkv::ShardGroup* ClusterConfigChangeResp::mutable_shard_group(int index) {
  // @@protoc_insertion_point(field_mutable:eraftkv.ClusterConfigChangeResp.shard_group)
  return shard_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::ShardGroup >*
ClusterConfigChangeResp::mutable_shard_group() {
  // @@protoc_insertion_point(field_mutable_list:eraftkv.ClusterConfigChangeResp.shard_group)
  return &shard_group_;
}
inline const ::eraftkv::ShardGroup& ClusterConfigChangeResp::_internal_shard_group(int index) const {
  return shard_group_.Get(index);
}
inline const ::eraftkv::ShardGroup& ClusterConfigChangeResp::shard_group(int index) const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeResp.shard_group)
  return _internal_shard_group(index);
}
inline ::eraftkv::ShardGroup* ClusterConfigChangeResp::_internal_add_shard_group() {
  return shard_group_.Add();
}
inline ::eraftkv::ShardGroup* ClusterConfigChangeResp::add_shard_group() {
  // @@protoc_insertion_point(field_add:eraftkv.ClusterConfigChangeResp.shard_group)
  return _internal_add_shard_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::ShardGroup >&
ClusterConfigChangeResp::shard_group() const {
  // @@protoc_insertion_point(field_list:eraftkv.ClusterConfigChangeResp.shard_group)
  return shard_group_;
}

// int64 config_version = 3;
inline void ClusterConfigChangeResp::clear_config_version() {
  config_version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeResp::_internal_config_version() const {
  return config_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClusterConfigChangeResp::config_version() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClusterConfigChangeResp.config_version)
  return _internal_config_version();
}
inline void ClusterConfigChangeResp::_internal_set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  config_version_ = value;
}
inline void ClusterConfigChangeResp::set_config_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_config_version(value);
  // @@protoc_insertion_point(field_set:eraftkv.ClusterConfigChangeResp.config_version)
}

// -------------------------------------------------------------------

// KvOpPair

// .eraftkv.ClientOpType op_type = 1;
inline void KvOpPair::clear_op_type() {
  op_type_ = 0;
}
inline ::eraftkv::ClientOpType KvOpPair::_internal_op_type() const {
  return static_cast< ::eraftkv::ClientOpType >(op_type_);
}
inline ::eraftkv::ClientOpType KvOpPair::op_type() const {
  // @@protoc_insertion_point(field_get:eraftkv.KvOpPair.op_type)
  return _internal_op_type();
}
inline void KvOpPair::_internal_set_op_type(::eraftkv::ClientOpType value) {
  
  op_type_ = value;
}
inline void KvOpPair::set_op_type(::eraftkv::ClientOpType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:eraftkv.KvOpPair.op_type)
}

// string key = 2;
inline void KvOpPair::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KvOpPair::key() const {
  // @@protoc_insertion_point(field_get:eraftkv.KvOpPair.key)
  return _internal_key();
}
inline void KvOpPair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:eraftkv.KvOpPair.key)
}
inline std::string* KvOpPair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:eraftkv.KvOpPair.key)
  return _internal_mutable_key();
}
inline const std::string& KvOpPair::_internal_key() const {
  return key_.GetNoArena();
}
inline void KvOpPair::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KvOpPair::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.KvOpPair.key)
}
inline void KvOpPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.KvOpPair.key)
}
inline void KvOpPair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.KvOpPair.key)
}
inline std::string* KvOpPair::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvOpPair::release_key() {
  // @@protoc_insertion_point(field_release:eraftkv.KvOpPair.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvOpPair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.KvOpPair.key)
}

// string value = 3;
inline void KvOpPair::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KvOpPair::value() const {
  // @@protoc_insertion_point(field_get:eraftkv.KvOpPair.value)
  return _internal_value();
}
inline void KvOpPair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:eraftkv.KvOpPair.value)
}
inline std::string* KvOpPair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:eraftkv.KvOpPair.value)
  return _internal_mutable_value();
}
inline const std::string& KvOpPair::_internal_value() const {
  return value_.GetNoArena();
}
inline void KvOpPair::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KvOpPair::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftkv.KvOpPair.value)
}
inline void KvOpPair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftkv.KvOpPair.value)
}
inline void KvOpPair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftkv.KvOpPair.value)
}
inline std::string* KvOpPair::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KvOpPair::release_value() {
  // @@protoc_insertion_point(field_release:eraftkv.KvOpPair.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KvOpPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:eraftkv.KvOpPair.value)
}

// bool success = 4;
inline void KvOpPair::clear_success() {
  success_ = false;
}
inline bool KvOpPair::_internal_success() const {
  return success_;
}
inline bool KvOpPair::success() const {
  // @@protoc_insertion_point(field_get:eraftkv.KvOpPair.success)
  return _internal_success();
}
inline void KvOpPair::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void KvOpPair::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:eraftkv.KvOpPair.success)
}

// int64 op_count = 5;
inline void KvOpPair::clear_op_count() {
  op_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KvOpPair::_internal_op_count() const {
  return op_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KvOpPair::op_count() const {
  // @@protoc_insertion_point(field_get:eraftkv.KvOpPair.op_count)
  return _internal_op_count();
}
inline void KvOpPair::_internal_set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  op_count_ = value;
}
inline void KvOpPair::set_op_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_op_count(value);
  // @@protoc_insertion_point(field_set:eraftkv.KvOpPair.op_count)
}

// -------------------------------------------------------------------

// ClientOperationReq

// uint64 op_timestamp = 1;
inline void ClientOperationReq::clear_op_timestamp() {
  op_timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientOperationReq::_internal_op_timestamp() const {
  return op_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientOperationReq::op_timestamp() const {
  // @@protoc_insertion_point(field_get:eraftkv.ClientOperationReq.op_timestamp)
  return _internal_op_timestamp();
}
inline void ClientOperationReq::_internal_set_op_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  op_timestamp_ = value;
}
inline void ClientOperationReq::set_op_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_op_timestamp(value);
  // @@protoc_insertion_point(field_set:eraftkv.ClientOperationReq.op_timestamp)
}

// repeated .eraftkv.KvOpPair kvs = 2;
inline int ClientOperationReq::_internal_kvs_size() const {
  return kvs_.size();
}
inline int ClientOperationReq::kvs_size() const {
  return _internal_kvs_size();
}
inline void ClientOperationReq::clear_kvs() {
  kvs_.Clear();
}
inline ::eraftkv::KvOpPair* ClientOperationReq::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:eraftkv.ClientOperationReq.kvs)
  return kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >*
ClientOperationReq::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:eraftkv.ClientOperationReq.kvs)
  return &kvs_;
}
inline const ::eraftkv::KvOpPair& ClientOperationReq::_internal_kvs(int index) const {
  return kvs_.Get(index);
}
inline const ::eraftkv::KvOpPair& ClientOperationReq::kvs(int index) const {
  // @@protoc_insertion_point(field_get:eraftkv.ClientOperationReq.kvs)
  return _internal_kvs(index);
}
inline ::eraftkv::KvOpPair* ClientOperationReq::_internal_add_kvs() {
  return kvs_.Add();
}
inline ::eraftkv::KvOpPair* ClientOperationReq::add_kvs() {
  // @@protoc_insertion_point(field_add:eraftkv.ClientOperationReq.kvs)
  return _internal_add_kvs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >&
ClientOperationReq::kvs() const {
  // @@protoc_insertion_point(field_list:eraftkv.ClientOperationReq.kvs)
  return kvs_;
}

// -------------------------------------------------------------------

// ClientOperationResp

// repeated .eraftkv.KvOpPair ops = 2;
inline int ClientOperationResp::_internal_ops_size() const {
  return ops_.size();
}
inline int ClientOperationResp::ops_size() const {
  return _internal_ops_size();
}
inline void ClientOperationResp::clear_ops() {
  ops_.Clear();
}
inline ::eraftkv::KvOpPair* ClientOperationResp::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:eraftkv.ClientOperationResp.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >*
ClientOperationResp::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:eraftkv.ClientOperationResp.ops)
  return &ops_;
}
inline const ::eraftkv::KvOpPair& ClientOperationResp::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::eraftkv::KvOpPair& ClientOperationResp::ops(int index) const {
  // @@protoc_insertion_point(field_get:eraftkv.ClientOperationResp.ops)
  return _internal_ops(index);
}
inline ::eraftkv::KvOpPair* ClientOperationResp::_internal_add_ops() {
  return ops_.Add();
}
inline ::eraftkv::KvOpPair* ClientOperationResp::add_ops() {
  // @@protoc_insertion_point(field_add:eraftkv.ClientOperationResp.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftkv::KvOpPair >&
ClientOperationResp::ops() const {
  // @@protoc_insertion_point(field_list:eraftkv.ClientOperationResp.ops)
  return ops_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eraftkv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eraftkv::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftkv::ErrorCode>() {
  return ::eraftkv::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::eraftkv::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftkv::EntryType>() {
  return ::eraftkv::EntryType_descriptor();
}
template <> struct is_proto_enum< ::eraftkv::KeyRangeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftkv::KeyRangeStatus>() {
  return ::eraftkv::KeyRangeStatus_descriptor();
}
template <> struct is_proto_enum< ::eraftkv::ServerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftkv::ServerStatus>() {
  return ::eraftkv::ServerStatus_descriptor();
}
template <> struct is_proto_enum< ::eraftkv::ClusterConfigChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftkv::ClusterConfigChangeType>() {
  return ::eraftkv::ClusterConfigChangeType_descriptor();
}
template <> struct is_proto_enum< ::eraftkv::ClientOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftkv::ClientOpType>() {
  return ::eraftkv::ClientOpType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eraftkv_2eproto
