// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tinykvpb.proto

#include "tinykvpb.pb.h"
#include "tinykvpb.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tinykvpb {

static const char* TinyKv_method_names[] = {
  "/tinykvpb.TinyKv/KvGet",
  "/tinykvpb.TinyKv/KvScan",
  "/tinykvpb.TinyKv/KvPrewrite",
  "/tinykvpb.TinyKv/KvCommit",
  "/tinykvpb.TinyKv/KvCheckTxnStatus",
  "/tinykvpb.TinyKv/KvBatchRollback",
  "/tinykvpb.TinyKv/KvResolveLock",
  "/tinykvpb.TinyKv/TransferLeader",
  "/tinykvpb.TinyKv/PeerConfChange",
  "/tinykvpb.TinyKv/SplitRegion",
  "/tinykvpb.TinyKv/RawGet",
  "/tinykvpb.TinyKv/RawPut",
  "/tinykvpb.TinyKv/RawDelete",
  "/tinykvpb.TinyKv/RawScan",
  "/tinykvpb.TinyKv/Raft",
  "/tinykvpb.TinyKv/Snapshot",
  "/tinykvpb.TinyKv/Coprocessor",
};

std::unique_ptr< TinyKv::Stub> TinyKv::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TinyKv::Stub> stub(new TinyKv::Stub(channel));
  return stub;
}

TinyKv::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_KvGet_(TinyKv_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvScan_(TinyKv_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvPrewrite_(TinyKv_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvCommit_(TinyKv_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvCheckTxnStatus_(TinyKv_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvBatchRollback_(TinyKv_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KvResolveLock_(TinyKv_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferLeader_(TinyKv_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PeerConfChange_(TinyKv_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SplitRegion_(TinyKv_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawGet_(TinyKv_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawPut_(TinyKv_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawDelete_(TinyKv_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RawScan_(TinyKv_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Raft_(TinyKv_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Snapshot_(TinyKv_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Coprocessor_(TinyKv_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TinyKv::Stub::KvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::kvrpcpb::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvGet_, context, request, response);
}

void TinyKv::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::KvGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::GetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>* TinyKv::Stub::AsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::GetResponse>::Create(channel_.get(), cq, rpcmethod_KvGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::GetResponse>* TinyKv::Stub::PrepareAsyncKvGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::GetResponse>::Create(channel_.get(), cq, rpcmethod_KvGet_, context, request, false);
}

::grpc::Status TinyKv::Stub::KvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::kvrpcpb::ScanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvScan_, context, request, response);
}

void TinyKv::Stub::experimental_async::KvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvScan_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvScan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::ScanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvScan_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvScan(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvScan_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::KvScan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::ScanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvScan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>* TinyKv::Stub::AsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ScanResponse>::Create(channel_.get(), cq, rpcmethod_KvScan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ScanResponse>* TinyKv::Stub::PrepareAsyncKvScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::ScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ScanResponse>::Create(channel_.get(), cq, rpcmethod_KvScan_, context, request, false);
}

::grpc::Status TinyKv::Stub::KvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::kvrpcpb::PrewriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvPrewrite_, context, request, response);
}

void TinyKv::Stub::experimental_async::KvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvPrewrite_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvPrewrite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::PrewriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvPrewrite_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvPrewrite(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvPrewrite_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::KvPrewrite(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::PrewriteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvPrewrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>* TinyKv::Stub::AsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::PrewriteResponse>::Create(channel_.get(), cq, rpcmethod_KvPrewrite_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::PrewriteResponse>* TinyKv::Stub::PrepareAsyncKvPrewriteRaw(::grpc::ClientContext* context, const ::kvrpcpb::PrewriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::PrewriteResponse>::Create(channel_.get(), cq, rpcmethod_KvPrewrite_, context, request, false);
}

::grpc::Status TinyKv::Stub::KvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::kvrpcpb::CommitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvCommit_, context, request, response);
}

void TinyKv::Stub::experimental_async::KvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvCommit_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvCommit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::CommitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvCommit_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvCommit(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvCommit_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::KvCommit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::CommitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvCommit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>* TinyKv::Stub::AsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CommitResponse>::Create(channel_.get(), cq, rpcmethod_KvCommit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CommitResponse>* TinyKv::Stub::PrepareAsyncKvCommitRaw(::grpc::ClientContext* context, const ::kvrpcpb::CommitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CommitResponse>::Create(channel_.get(), cq, rpcmethod_KvCommit_, context, request, false);
}

::grpc::Status TinyKv::Stub::KvCheckTxnStatus(::grpc::ClientContext* context, const ::kvrpcpb::CheckTxnStatusRequest& request, ::kvrpcpb::CheckTxnStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvCheckTxnStatus_, context, request, response);
}

void TinyKv::Stub::experimental_async::KvCheckTxnStatus(::grpc::ClientContext* context, const ::kvrpcpb::CheckTxnStatusRequest* request, ::kvrpcpb::CheckTxnStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvCheckTxnStatus_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvCheckTxnStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::CheckTxnStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvCheckTxnStatus_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvCheckTxnStatus(::grpc::ClientContext* context, const ::kvrpcpb::CheckTxnStatusRequest* request, ::kvrpcpb::CheckTxnStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvCheckTxnStatus_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::KvCheckTxnStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::CheckTxnStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvCheckTxnStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CheckTxnStatusResponse>* TinyKv::Stub::AsyncKvCheckTxnStatusRaw(::grpc::ClientContext* context, const ::kvrpcpb::CheckTxnStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CheckTxnStatusResponse>::Create(channel_.get(), cq, rpcmethod_KvCheckTxnStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::CheckTxnStatusResponse>* TinyKv::Stub::PrepareAsyncKvCheckTxnStatusRaw(::grpc::ClientContext* context, const ::kvrpcpb::CheckTxnStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::CheckTxnStatusResponse>::Create(channel_.get(), cq, rpcmethod_KvCheckTxnStatus_, context, request, false);
}

::grpc::Status TinyKv::Stub::KvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::kvrpcpb::BatchRollbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvBatchRollback_, context, request, response);
}

void TinyKv::Stub::experimental_async::KvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBatchRollback_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvBatchRollback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::BatchRollbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvBatchRollback_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvBatchRollback(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBatchRollback_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::KvBatchRollback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::BatchRollbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvBatchRollback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>* TinyKv::Stub::AsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::BatchRollbackResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchRollback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::BatchRollbackResponse>* TinyKv::Stub::PrepareAsyncKvBatchRollbackRaw(::grpc::ClientContext* context, const ::kvrpcpb::BatchRollbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::BatchRollbackResponse>::Create(channel_.get(), cq, rpcmethod_KvBatchRollback_, context, request, false);
}

::grpc::Status TinyKv::Stub::KvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::kvrpcpb::ResolveLockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KvResolveLock_, context, request, response);
}

void TinyKv::Stub::experimental_async::KvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvResolveLock_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvResolveLock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::ResolveLockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_KvResolveLock_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::KvResolveLock(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvResolveLock_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::KvResolveLock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::ResolveLockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_KvResolveLock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>* TinyKv::Stub::AsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ResolveLockResponse>::Create(channel_.get(), cq, rpcmethod_KvResolveLock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::ResolveLockResponse>* TinyKv::Stub::PrepareAsyncKvResolveLockRaw(::grpc::ClientContext* context, const ::kvrpcpb::ResolveLockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::ResolveLockResponse>::Create(channel_.get(), cq, rpcmethod_KvResolveLock_, context, request, false);
}

::grpc::Status TinyKv::Stub::TransferLeader(::grpc::ClientContext* context, const ::raft_cmdpb::TransferLeaderRequest& request, ::raft_cmdpb::TransferLeaderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TransferLeader_, context, request, response);
}

void TinyKv::Stub::experimental_async::TransferLeader(::grpc::ClientContext* context, const ::raft_cmdpb::TransferLeaderRequest* request, ::raft_cmdpb::TransferLeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferLeader_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::TransferLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_cmdpb::TransferLeaderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TransferLeader_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::TransferLeader(::grpc::ClientContext* context, const ::raft_cmdpb::TransferLeaderRequest* request, ::raft_cmdpb::TransferLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferLeader_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::TransferLeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_cmdpb::TransferLeaderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TransferLeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raft_cmdpb::TransferLeaderResponse>* TinyKv::Stub::AsyncTransferLeaderRaw(::grpc::ClientContext* context, const ::raft_cmdpb::TransferLeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_cmdpb::TransferLeaderResponse>::Create(channel_.get(), cq, rpcmethod_TransferLeader_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft_cmdpb::TransferLeaderResponse>* TinyKv::Stub::PrepareAsyncTransferLeaderRaw(::grpc::ClientContext* context, const ::raft_cmdpb::TransferLeaderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_cmdpb::TransferLeaderResponse>::Create(channel_.get(), cq, rpcmethod_TransferLeader_, context, request, false);
}

::grpc::Status TinyKv::Stub::PeerConfChange(::grpc::ClientContext* context, const ::raft_cmdpb::ChangePeerRequest& request, ::raft_cmdpb::ChangePeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PeerConfChange_, context, request, response);
}

void TinyKv::Stub::experimental_async::PeerConfChange(::grpc::ClientContext* context, const ::raft_cmdpb::ChangePeerRequest* request, ::raft_cmdpb::ChangePeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PeerConfChange_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::PeerConfChange(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_cmdpb::ChangePeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PeerConfChange_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::PeerConfChange(::grpc::ClientContext* context, const ::raft_cmdpb::ChangePeerRequest* request, ::raft_cmdpb::ChangePeerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PeerConfChange_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::PeerConfChange(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_cmdpb::ChangePeerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PeerConfChange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raft_cmdpb::ChangePeerResponse>* TinyKv::Stub::AsyncPeerConfChangeRaw(::grpc::ClientContext* context, const ::raft_cmdpb::ChangePeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_cmdpb::ChangePeerResponse>::Create(channel_.get(), cq, rpcmethod_PeerConfChange_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft_cmdpb::ChangePeerResponse>* TinyKv::Stub::PrepareAsyncPeerConfChangeRaw(::grpc::ClientContext* context, const ::raft_cmdpb::ChangePeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_cmdpb::ChangePeerResponse>::Create(channel_.get(), cq, rpcmethod_PeerConfChange_, context, request, false);
}

::grpc::Status TinyKv::Stub::SplitRegion(::grpc::ClientContext* context, const ::raft_cmdpb::SplitRequest& request, ::raft_cmdpb::SplitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SplitRegion_, context, request, response);
}

void TinyKv::Stub::experimental_async::SplitRegion(::grpc::ClientContext* context, const ::raft_cmdpb::SplitRequest* request, ::raft_cmdpb::SplitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SplitRegion_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::SplitRegion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_cmdpb::SplitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SplitRegion_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::SplitRegion(::grpc::ClientContext* context, const ::raft_cmdpb::SplitRequest* request, ::raft_cmdpb::SplitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SplitRegion_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::SplitRegion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_cmdpb::SplitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SplitRegion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raft_cmdpb::SplitResponse>* TinyKv::Stub::AsyncSplitRegionRaw(::grpc::ClientContext* context, const ::raft_cmdpb::SplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_cmdpb::SplitResponse>::Create(channel_.get(), cq, rpcmethod_SplitRegion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft_cmdpb::SplitResponse>* TinyKv::Stub::PrepareAsyncSplitRegionRaw(::grpc::ClientContext* context, const ::raft_cmdpb::SplitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_cmdpb::SplitResponse>::Create(channel_.get(), cq, rpcmethod_SplitRegion_, context, request, false);
}

::grpc::Status TinyKv::Stub::RawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::kvrpcpb::RawGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawGet_, context, request, response);
}

void TinyKv::Stub::experimental_async::RawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawGet_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawGet_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawGet(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawGet_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::RawGet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>* TinyKv::Stub::AsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawGetResponse>::Create(channel_.get(), cq, rpcmethod_RawGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawGetResponse>* TinyKv::Stub::PrepareAsyncRawGetRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawGetResponse>::Create(channel_.get(), cq, rpcmethod_RawGet_, context, request, false);
}

::grpc::Status TinyKv::Stub::RawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::kvrpcpb::RawPutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawPut_, context, request, response);
}

void TinyKv::Stub::experimental_async::RawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawPut_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawPutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawPut_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawPut(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawPut_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::RawPut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawPutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>* TinyKv::Stub::AsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawPutResponse>::Create(channel_.get(), cq, rpcmethod_RawPut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawPutResponse>* TinyKv::Stub::PrepareAsyncRawPutRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawPutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawPutResponse>::Create(channel_.get(), cq, rpcmethod_RawPut_, context, request, false);
}

::grpc::Status TinyKv::Stub::RawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::kvrpcpb::RawDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawDelete_, context, request, response);
}

void TinyKv::Stub::experimental_async::RawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawDelete_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawDelete_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawDelete(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawDelete_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::RawDelete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawDeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>* TinyKv::Stub::AsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawDeleteResponse>::Create(channel_.get(), cq, rpcmethod_RawDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawDeleteResponse>* TinyKv::Stub::PrepareAsyncRawDeleteRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawDeleteResponse>::Create(channel_.get(), cq, rpcmethod_RawDelete_, context, request, false);
}

::grpc::Status TinyKv::Stub::RawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::kvrpcpb::RawScanResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RawScan_, context, request, response);
}

void TinyKv::Stub::experimental_async::RawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawScan_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawScan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawScanResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RawScan_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::RawScan(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawScan_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::RawScan(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::kvrpcpb::RawScanResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RawScan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>* TinyKv::Stub::AsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawScanResponse>::Create(channel_.get(), cq, rpcmethod_RawScan_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::kvrpcpb::RawScanResponse>* TinyKv::Stub::PrepareAsyncRawScanRaw(::grpc::ClientContext* context, const ::kvrpcpb::RawScanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::kvrpcpb::RawScanResponse>::Create(channel_.get(), cq, rpcmethod_RawScan_, context, request, false);
}

::grpc::Status TinyKv::Stub::Raft(::grpc::ClientContext* context, const ::raft_serverpb::RaftMessage& request, ::raft_serverpb::Done* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Raft_, context, request, response);
}

void TinyKv::Stub::experimental_async::Raft(::grpc::ClientContext* context, const ::raft_serverpb::RaftMessage* request, ::raft_serverpb::Done* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Raft_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::Raft(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_serverpb::Done* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Raft_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::Raft(::grpc::ClientContext* context, const ::raft_serverpb::RaftMessage* request, ::raft_serverpb::Done* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Raft_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::Raft(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_serverpb::Done* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Raft_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raft_serverpb::Done>* TinyKv::Stub::AsyncRaftRaw(::grpc::ClientContext* context, const ::raft_serverpb::RaftMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_serverpb::Done>::Create(channel_.get(), cq, rpcmethod_Raft_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft_serverpb::Done>* TinyKv::Stub::PrepareAsyncRaftRaw(::grpc::ClientContext* context, const ::raft_serverpb::RaftMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_serverpb::Done>::Create(channel_.get(), cq, rpcmethod_Raft_, context, request, false);
}

::grpc::Status TinyKv::Stub::Snapshot(::grpc::ClientContext* context, const ::raft_serverpb::SnapshotChunk& request, ::raft_serverpb::Done* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Snapshot_, context, request, response);
}

void TinyKv::Stub::experimental_async::Snapshot(::grpc::ClientContext* context, const ::raft_serverpb::SnapshotChunk* request, ::raft_serverpb::Done* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Snapshot_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::Snapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_serverpb::Done* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Snapshot_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::Snapshot(::grpc::ClientContext* context, const ::raft_serverpb::SnapshotChunk* request, ::raft_serverpb::Done* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Snapshot_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::Snapshot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::raft_serverpb::Done* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Snapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raft_serverpb::Done>* TinyKv::Stub::AsyncSnapshotRaw(::grpc::ClientContext* context, const ::raft_serverpb::SnapshotChunk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_serverpb::Done>::Create(channel_.get(), cq, rpcmethod_Snapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::raft_serverpb::Done>* TinyKv::Stub::PrepareAsyncSnapshotRaw(::grpc::ClientContext* context, const ::raft_serverpb::SnapshotChunk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::raft_serverpb::Done>::Create(channel_.get(), cq, rpcmethod_Snapshot_, context, request, false);
}

::grpc::Status TinyKv::Stub::Coprocessor(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::coprocessor::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Coprocessor_, context, request, response);
}

void TinyKv::Stub::experimental_async::Coprocessor(::grpc::ClientContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Coprocessor_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::Coprocessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coprocessor::Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Coprocessor_, context, request, response, std::move(f));
}

void TinyKv::Stub::experimental_async::Coprocessor(::grpc::ClientContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Coprocessor_, context, request, response, reactor);
}

void TinyKv::Stub::experimental_async::Coprocessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coprocessor::Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Coprocessor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coprocessor::Response>* TinyKv::Stub::AsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coprocessor::Response>::Create(channel_.get(), cq, rpcmethod_Coprocessor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coprocessor::Response>* TinyKv::Stub::PrepareAsyncCoprocessorRaw(::grpc::ClientContext* context, const ::coprocessor::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coprocessor::Response>::Create(channel_.get(), cq, rpcmethod_Coprocessor_, context, request, false);
}

TinyKv::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::GetRequest, ::kvrpcpb::GetResponse>(
          std::mem_fn(&TinyKv::Service::KvGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::ScanRequest, ::kvrpcpb::ScanResponse>(
          std::mem_fn(&TinyKv::Service::KvScan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::PrewriteRequest, ::kvrpcpb::PrewriteResponse>(
          std::mem_fn(&TinyKv::Service::KvPrewrite), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::CommitRequest, ::kvrpcpb::CommitResponse>(
          std::mem_fn(&TinyKv::Service::KvCommit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::CheckTxnStatusRequest, ::kvrpcpb::CheckTxnStatusResponse>(
          std::mem_fn(&TinyKv::Service::KvCheckTxnStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::BatchRollbackRequest, ::kvrpcpb::BatchRollbackResponse>(
          std::mem_fn(&TinyKv::Service::KvBatchRollback), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::ResolveLockRequest, ::kvrpcpb::ResolveLockResponse>(
          std::mem_fn(&TinyKv::Service::KvResolveLock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::raft_cmdpb::TransferLeaderRequest, ::raft_cmdpb::TransferLeaderResponse>(
          std::mem_fn(&TinyKv::Service::TransferLeader), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::raft_cmdpb::ChangePeerRequest, ::raft_cmdpb::ChangePeerResponse>(
          std::mem_fn(&TinyKv::Service::PeerConfChange), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::raft_cmdpb::SplitRequest, ::raft_cmdpb::SplitResponse>(
          std::mem_fn(&TinyKv::Service::SplitRegion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::RawGetRequest, ::kvrpcpb::RawGetResponse>(
          std::mem_fn(&TinyKv::Service::RawGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::RawPutRequest, ::kvrpcpb::RawPutResponse>(
          std::mem_fn(&TinyKv::Service::RawPut), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::RawDeleteRequest, ::kvrpcpb::RawDeleteResponse>(
          std::mem_fn(&TinyKv::Service::RawDelete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::kvrpcpb::RawScanRequest, ::kvrpcpb::RawScanResponse>(
          std::mem_fn(&TinyKv::Service::RawScan), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::raft_serverpb::RaftMessage, ::raft_serverpb::Done>(
          std::mem_fn(&TinyKv::Service::Raft), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::raft_serverpb::SnapshotChunk, ::raft_serverpb::Done>(
          std::mem_fn(&TinyKv::Service::Snapshot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinyKv_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinyKv::Service, ::coprocessor::Request, ::coprocessor::Response>(
          std::mem_fn(&TinyKv::Service::Coprocessor), this)));
}

TinyKv::Service::~Service() {
}

::grpc::Status TinyKv::Service::KvGet(::grpc::ServerContext* context, const ::kvrpcpb::GetRequest* request, ::kvrpcpb::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::KvScan(::grpc::ServerContext* context, const ::kvrpcpb::ScanRequest* request, ::kvrpcpb::ScanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::KvPrewrite(::grpc::ServerContext* context, const ::kvrpcpb::PrewriteRequest* request, ::kvrpcpb::PrewriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::KvCommit(::grpc::ServerContext* context, const ::kvrpcpb::CommitRequest* request, ::kvrpcpb::CommitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::KvCheckTxnStatus(::grpc::ServerContext* context, const ::kvrpcpb::CheckTxnStatusRequest* request, ::kvrpcpb::CheckTxnStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::KvBatchRollback(::grpc::ServerContext* context, const ::kvrpcpb::BatchRollbackRequest* request, ::kvrpcpb::BatchRollbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::KvResolveLock(::grpc::ServerContext* context, const ::kvrpcpb::ResolveLockRequest* request, ::kvrpcpb::ResolveLockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::TransferLeader(::grpc::ServerContext* context, const ::raft_cmdpb::TransferLeaderRequest* request, ::raft_cmdpb::TransferLeaderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::PeerConfChange(::grpc::ServerContext* context, const ::raft_cmdpb::ChangePeerRequest* request, ::raft_cmdpb::ChangePeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::SplitRegion(::grpc::ServerContext* context, const ::raft_cmdpb::SplitRequest* request, ::raft_cmdpb::SplitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::RawGet(::grpc::ServerContext* context, const ::kvrpcpb::RawGetRequest* request, ::kvrpcpb::RawGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::RawPut(::grpc::ServerContext* context, const ::kvrpcpb::RawPutRequest* request, ::kvrpcpb::RawPutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::RawDelete(::grpc::ServerContext* context, const ::kvrpcpb::RawDeleteRequest* request, ::kvrpcpb::RawDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::RawScan(::grpc::ServerContext* context, const ::kvrpcpb::RawScanRequest* request, ::kvrpcpb::RawScanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::Raft(::grpc::ServerContext* context, const ::raft_serverpb::RaftMessage* request, ::raft_serverpb::Done* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::Snapshot(::grpc::ServerContext* context, const ::raft_serverpb::SnapshotChunk* request, ::raft_serverpb::Done* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinyKv::Service::Coprocessor(::grpc::ServerContext* context, const ::coprocessor::Request* request, ::coprocessor::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinykvpb

