// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvrpcpb.proto

#include "kvrpcpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_errorpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Error_errorpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Context_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyError_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvPair_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockInfo_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mutation_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kvrpcpb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteConflict_kvrpcpb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Peer_metapb_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metapb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegionEpoch_metapb_2eproto;
namespace kvrpcpb {
class RawGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawGetRequest> _instance;
} _RawGetRequest_default_instance_;
class RawGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawGetResponse> _instance;
} _RawGetResponse_default_instance_;
class RawPutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawPutRequest> _instance;
} _RawPutRequest_default_instance_;
class RawPutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawPutResponse> _instance;
} _RawPutResponse_default_instance_;
class RawDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawDeleteRequest> _instance;
} _RawDeleteRequest_default_instance_;
class RawDeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawDeleteResponse> _instance;
} _RawDeleteResponse_default_instance_;
class RawScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawScanRequest> _instance;
} _RawScanRequest_default_instance_;
class RawScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawScanResponse> _instance;
} _RawScanResponse_default_instance_;
class GetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRequest> _instance;
} _GetRequest_default_instance_;
class GetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResponse> _instance;
} _GetResponse_default_instance_;
class PrewriteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrewriteRequest> _instance;
} _PrewriteRequest_default_instance_;
class PrewriteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrewriteResponse> _instance;
} _PrewriteResponse_default_instance_;
class CommitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitRequest> _instance;
} _CommitRequest_default_instance_;
class CommitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommitResponse> _instance;
} _CommitResponse_default_instance_;
class ScanRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanRequest> _instance;
} _ScanRequest_default_instance_;
class ScanResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanResponse> _instance;
} _ScanResponse_default_instance_;
class BatchRollbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchRollbackRequest> _instance;
} _BatchRollbackRequest_default_instance_;
class BatchRollbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatchRollbackResponse> _instance;
} _BatchRollbackResponse_default_instance_;
class CheckTxnStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckTxnStatusRequest> _instance;
} _CheckTxnStatusRequest_default_instance_;
class CheckTxnStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckTxnStatusResponse> _instance;
} _CheckTxnStatusResponse_default_instance_;
class ResolveLockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveLockRequest> _instance;
} _ResolveLockRequest_default_instance_;
class ResolveLockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResolveLockResponse> _instance;
} _ResolveLockResponse_default_instance_;
class KvPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KvPair> _instance;
} _KvPair_default_instance_;
class MutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mutation> _instance;
} _Mutation_default_instance_;
class KeyErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyError> _instance;
} _KeyError_default_instance_;
class LockInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockInfo> _instance;
} _LockInfo_default_instance_;
class WriteConflictDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteConflict> _instance;
} _WriteConflict_default_instance_;
class ContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Context> _instance;
} _Context_default_instance_;
}  // namespace kvrpcpb
static void InitDefaultsscc_info_BatchRollbackRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_BatchRollbackRequest_default_instance_;
    new (ptr) ::kvrpcpb::BatchRollbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::BatchRollbackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatchRollbackRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BatchRollbackRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_BatchRollbackResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_BatchRollbackResponse_default_instance_;
    new (ptr) ::kvrpcpb::BatchRollbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::BatchRollbackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatchRollbackResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BatchRollbackResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_CheckTxnStatusRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CheckTxnStatusRequest_default_instance_;
    new (ptr) ::kvrpcpb::CheckTxnStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::CheckTxnStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CheckTxnStatusRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_CheckTxnStatusResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CheckTxnStatusResponse_default_instance_;
    new (ptr) ::kvrpcpb::CheckTxnStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::CheckTxnStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CheckTxnStatusResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_CommitRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CommitRequest_default_instance_;
    new (ptr) ::kvrpcpb::CommitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::CommitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommitRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CommitRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_CommitResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_CommitResponse_default_instance_;
    new (ptr) ::kvrpcpb::CommitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::CommitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommitResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CommitResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_Context_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_Context_default_instance_;
    new (ptr) ::kvrpcpb::Context();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::Context::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Context_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Context_kvrpcpb_2eproto}, {
      &scc_info_RegionEpoch_metapb_2eproto.base,
      &scc_info_Peer_metapb_2eproto.base,}};

static void InitDefaultsscc_info_GetRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_GetRequest_default_instance_;
    new (ptr) ::kvrpcpb::GetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::GetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_GetResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_GetResponse_default_instance_;
    new (ptr) ::kvrpcpb::GetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::GetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GetResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_KeyError_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_KeyError_default_instance_;
    new (ptr) ::kvrpcpb::KeyError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::KeyError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KeyError_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_KeyError_kvrpcpb_2eproto}, {
      &scc_info_LockInfo_kvrpcpb_2eproto.base,
      &scc_info_WriteConflict_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_KvPair_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_KvPair_default_instance_;
    new (ptr) ::kvrpcpb::KvPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::KvPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KvPair_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_KvPair_kvrpcpb_2eproto}, {
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_LockInfo_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_LockInfo_default_instance_;
    new (ptr) ::kvrpcpb::LockInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::LockInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockInfo_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LockInfo_kvrpcpb_2eproto}, {}};

static void InitDefaultsscc_info_Mutation_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_Mutation_default_instance_;
    new (ptr) ::kvrpcpb::Mutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::Mutation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mutation_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Mutation_kvrpcpb_2eproto}, {}};

static void InitDefaultsscc_info_PrewriteRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_PrewriteRequest_default_instance_;
    new (ptr) ::kvrpcpb::PrewriteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::PrewriteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrewriteRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PrewriteRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,
      &scc_info_Mutation_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_PrewriteResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_PrewriteResponse_default_instance_;
    new (ptr) ::kvrpcpb::PrewriteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::PrewriteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PrewriteResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PrewriteResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawDeleteRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawDeleteRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawDeleteRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawDeleteRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawDeleteResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawDeleteResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawDeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawDeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawDeleteResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawDeleteResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_RawGetRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawGetRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawGetRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawGetRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawGetResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawGetResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawGetResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawGetResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_RawPutRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawPutRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawPutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawPutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawPutRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawPutRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawPutResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawPutResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawPutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawPutResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawPutResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawPutResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,}};

static void InitDefaultsscc_info_RawScanRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawScanRequest_default_instance_;
    new (ptr) ::kvrpcpb::RawScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawScanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawScanRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RawScanRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_RawScanResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_RawScanResponse_default_instance_;
    new (ptr) ::kvrpcpb::RawScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::RawScanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RawScanResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RawScanResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KvPair_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ResolveLockRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ResolveLockRequest_default_instance_;
    new (ptr) ::kvrpcpb::ResolveLockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::ResolveLockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResolveLockRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResolveLockRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ResolveLockResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ResolveLockResponse_default_instance_;
    new (ptr) ::kvrpcpb::ResolveLockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::ResolveLockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResolveLockResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ResolveLockResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KeyError_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ScanRequest_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ScanRequest_default_instance_;
    new (ptr) ::kvrpcpb::ScanRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::ScanRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScanRequest_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScanRequest_kvrpcpb_2eproto}, {
      &scc_info_Context_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_ScanResponse_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_ScanResponse_default_instance_;
    new (ptr) ::kvrpcpb::ScanResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::ScanResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ScanResponse_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ScanResponse_kvrpcpb_2eproto}, {
      &scc_info_Error_errorpb_2eproto.base,
      &scc_info_KvPair_kvrpcpb_2eproto.base,}};

static void InitDefaultsscc_info_WriteConflict_kvrpcpb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kvrpcpb::_WriteConflict_default_instance_;
    new (ptr) ::kvrpcpb::WriteConflict();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kvrpcpb::WriteConflict::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteConflict_kvrpcpb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WriteConflict_kvrpcpb_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kvrpcpb_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kvrpcpb_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kvrpcpb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kvrpcpb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetRequest, cf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, value_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawGetResponse, not_found_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, value_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, cf_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawPutResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteRequest, cf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawDeleteResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, start_key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanRequest, cf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::RawScanResponse, kvs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, value_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::GetResponse, not_found_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, mutations_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, primary_lock_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteRequest, lock_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::PrewriteResponse, errors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, keys_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitRequest, commit_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CommitResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, start_key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanRequest, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ScanResponse, pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::BatchRollbackResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, primary_key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, lock_ts_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusRequest, current_ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, lock_ttl_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, commit_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::CheckTxnStatusResponse, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, context_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, start_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockRequest, commit_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockResponse, region_error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::ResolveLockResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, error_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KvPair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, op_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Mutation, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, locked_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, retryable_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, abort_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::KeyError, conflict_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, primary_lock_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, lock_version_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::LockInfo, lock_ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, start_ts_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, conflict_ts_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, key_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::WriteConflict, primary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, region_id_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, region_epoch_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, peer_),
  PROTOBUF_FIELD_OFFSET(::kvrpcpb::Context, term_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kvrpcpb::RawGetRequest)},
  { 8, -1, sizeof(::kvrpcpb::RawGetResponse)},
  { 17, -1, sizeof(::kvrpcpb::RawPutRequest)},
  { 28, -1, sizeof(::kvrpcpb::RawPutResponse)},
  { 35, -1, sizeof(::kvrpcpb::RawDeleteRequest)},
  { 43, -1, sizeof(::kvrpcpb::RawDeleteResponse)},
  { 50, -1, sizeof(::kvrpcpb::RawScanRequest)},
  { 59, -1, sizeof(::kvrpcpb::RawScanResponse)},
  { 67, -1, sizeof(::kvrpcpb::GetRequest)},
  { 75, -1, sizeof(::kvrpcpb::GetResponse)},
  { 84, -1, sizeof(::kvrpcpb::PrewriteRequest)},
  { 94, -1, sizeof(::kvrpcpb::PrewriteResponse)},
  { 101, -1, sizeof(::kvrpcpb::CommitRequest)},
  { 110, -1, sizeof(::kvrpcpb::CommitResponse)},
  { 117, -1, sizeof(::kvrpcpb::ScanRequest)},
  { 126, -1, sizeof(::kvrpcpb::ScanResponse)},
  { 133, -1, sizeof(::kvrpcpb::BatchRollbackRequest)},
  { 141, -1, sizeof(::kvrpcpb::BatchRollbackResponse)},
  { 148, -1, sizeof(::kvrpcpb::CheckTxnStatusRequest)},
  { 157, -1, sizeof(::kvrpcpb::CheckTxnStatusResponse)},
  { 166, -1, sizeof(::kvrpcpb::ResolveLockRequest)},
  { 174, -1, sizeof(::kvrpcpb::ResolveLockResponse)},
  { 181, -1, sizeof(::kvrpcpb::KvPair)},
  { 189, -1, sizeof(::kvrpcpb::Mutation)},
  { 197, -1, sizeof(::kvrpcpb::KeyError)},
  { 206, -1, sizeof(::kvrpcpb::LockInfo)},
  { 215, -1, sizeof(::kvrpcpb::WriteConflict)},
  { 224, -1, sizeof(::kvrpcpb::Context)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawPutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawPutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawDeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_RawScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_PrewriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_PrewriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CommitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CommitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ScanResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_BatchRollbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_BatchRollbackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CheckTxnStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_CheckTxnStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ResolveLockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_ResolveLockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_KvPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_Mutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_KeyError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_LockInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_WriteConflict_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kvrpcpb::_Context_default_instance_),
};

const char descriptor_table_protodef_kvrpcpb_2eproto[] =
  "\n\rkvrpcpb.proto\022\007kvrpcpb\032\014metapb.proto\032\r"
  "errorpb.proto\"K\n\rRawGetRequest\022!\n\007contex"
  "t\030\001 \001(\0132\020.kvrpcpb.Context\022\013\n\003key\030\002 \001(\014\022\n"
  "\n\002cf\030\003 \001(\t\"g\n\016RawGetResponse\022$\n\014region_e"
  "rror\030\001 \001(\0132\016.errorpb.Error\022\r\n\005error\030\002 \001("
  "\t\022\r\n\005value\030\003 \001(\014\022\021\n\tnot_found\030\004 \001(\010\"t\n\rR"
  "awPutRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb."
  "Context\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\022\n\n\002c"
  "f\030\004 \001(\t\022\n\n\002id\030\005 \001(\004\022\014\n\004type\030\006 \001(\r\"E\n\016Raw"
  "PutResponse\022$\n\014region_error\030\001 \001(\0132\016.erro"
  "rpb.Error\022\r\n\005error\030\002 \001(\t\"N\n\020RawDeleteReq"
  "uest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022"
  "\013\n\003key\030\002 \001(\014\022\n\n\002cf\030\003 \001(\t\"H\n\021RawDeleteRes"
  "ponse\022$\n\014region_error\030\001 \001(\0132\016.errorpb.Er"
  "ror\022\r\n\005error\030\002 \001(\t\"a\n\016RawScanRequest\022!\n\007"
  "context\030\001 \001(\0132\020.kvrpcpb.Context\022\021\n\tstart"
  "_key\030\002 \001(\014\022\r\n\005limit\030\003 \001(\r\022\n\n\002cf\030\004 \001(\t\"d\n"
  "\017RawScanResponse\022$\n\014region_error\030\001 \001(\0132\016"
  ".errorpb.Error\022\r\n\005error\030\002 \001(\t\022\034\n\003kvs\030\003 \003"
  "(\0132\017.kvrpcpb.KvPair\"M\n\nGetRequest\022!\n\007con"
  "text\030\001 \001(\0132\020.kvrpcpb.Context\022\013\n\003key\030\002 \001("
  "\014\022\017\n\007version\030\003 \001(\004\"w\n\013GetResponse\022$\n\014reg"
  "ion_error\030\001 \001(\0132\016.errorpb.Error\022 \n\005error"
  "\030\002 \001(\0132\021.kvrpcpb.KeyError\022\r\n\005value\030\003 \001(\014"
  "\022\021\n\tnot_found\030\004 \001(\010\"\231\001\n\017PrewriteRequest\022"
  "!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022$\n\tmu"
  "tations\030\002 \003(\0132\021.kvrpcpb.Mutation\022\024\n\014prim"
  "ary_lock\030\003 \001(\014\022\025\n\rstart_version\030\004 \001(\004\022\020\n"
  "\010lock_ttl\030\005 \001(\004\"[\n\020PrewriteResponse\022$\n\014r"
  "egion_error\030\001 \001(\0132\016.errorpb.Error\022!\n\006err"
  "ors\030\002 \003(\0132\021.kvrpcpb.KeyError\"o\n\rCommitRe"
  "quest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context"
  "\022\025\n\rstart_version\030\002 \001(\004\022\014\n\004keys\030\003 \003(\014\022\026\n"
  "\016commit_version\030\004 \001(\004\"X\n\016CommitResponse\022"
  "$\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022 \n"
  "\005error\030\002 \001(\0132\021.kvrpcpb.KeyError\"c\n\013ScanR"
  "equest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Contex"
  "t\022\021\n\tstart_key\030\002 \001(\014\022\r\n\005limit\030\003 \001(\r\022\017\n\007v"
  "ersion\030\004 \001(\004\"T\n\014ScanResponse\022$\n\014region_e"
  "rror\030\001 \001(\0132\016.errorpb.Error\022\036\n\005pairs\030\002 \003("
  "\0132\017.kvrpcpb.KvPair\"^\n\024BatchRollbackReque"
  "st\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022\025\n"
  "\rstart_version\030\002 \001(\004\022\014\n\004keys\030\003 \003(\014\"_\n\025Ba"
  "tchRollbackResponse\022$\n\014region_error\030\001 \001("
  "\0132\016.errorpb.Error\022 \n\005error\030\002 \001(\0132\021.kvrpc"
  "pb.KeyError\"t\n\025CheckTxnStatusRequest\022!\n\007"
  "context\030\001 \001(\0132\020.kvrpcpb.Context\022\023\n\013prima"
  "ry_key\030\002 \001(\014\022\017\n\007lock_ts\030\003 \001(\004\022\022\n\ncurrent"
  "_ts\030\004 \001(\004\"\211\001\n\026CheckTxnStatusResponse\022$\n\014"
  "region_error\030\001 \001(\0132\016.errorpb.Error\022\020\n\010lo"
  "ck_ttl\030\002 \001(\004\022\026\n\016commit_version\030\003 \001(\004\022\037\n\006"
  "action\030\004 \001(\0162\017.kvrpcpb.Action\"f\n\022Resolve"
  "LockRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.C"
  "ontext\022\025\n\rstart_version\030\002 \001(\004\022\026\n\016commit_"
  "version\030\003 \001(\004\"]\n\023ResolveLockResponse\022$\n\014"
  "region_error\030\001 \001(\0132\016.errorpb.Error\022 \n\005er"
  "ror\030\002 \001(\0132\021.kvrpcpb.KeyError\"F\n\006KvPair\022 "
  "\n\005error\030\001 \001(\0132\021.kvrpcpb.KeyError\022\013\n\003key\030"
  "\002 \001(\014\022\r\n\005value\030\003 \001(\014\"\?\n\010Mutation\022\027\n\002op\030\001"
  " \001(\0162\013.kvrpcpb.Op\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030"
  "\003 \001(\014\"y\n\010KeyError\022!\n\006locked\030\001 \001(\0132\021.kvrp"
  "cpb.LockInfo\022\021\n\tretryable\030\002 \001(\t\022\r\n\005abort"
  "\030\003 \001(\t\022(\n\010conflict\030\004 \001(\0132\026.kvrpcpb.Write"
  "Conflict\"U\n\010LockInfo\022\024\n\014primary_lock\030\001 \001"
  "(\014\022\024\n\014lock_version\030\002 \001(\004\022\013\n\003key\030\003 \001(\014\022\020\n"
  "\010lock_ttl\030\004 \001(\004\"T\n\rWriteConflict\022\020\n\010star"
  "t_ts\030\001 \001(\004\022\023\n\013conflict_ts\030\002 \001(\004\022\013\n\003key\030\003"
  " \001(\014\022\017\n\007primary\030\004 \001(\014\"q\n\007Context\022\021\n\tregi"
  "on_id\030\001 \001(\004\022)\n\014region_epoch\030\002 \001(\0132\023.meta"
  "pb.RegionEpoch\022\032\n\004peer\030\003 \001(\0132\014.metapb.Pe"
  "er\022\014\n\004term\030\005 \001(\004*.\n\002Op\022\007\n\003Put\020\000\022\007\n\003Del\020\001"
  "\022\014\n\010Rollback\020\002\022\010\n\004Lock\020\003*G\n\006Action\022\014\n\010No"
  "Action\020\000\022\025\n\021TTLExpireRollback\020\001\022\030\n\024LockN"
  "otExistRollback\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kvrpcpb_2eproto_deps[2] = {
  &::descriptor_table_errorpb_2eproto,
  &::descriptor_table_metapb_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kvrpcpb_2eproto_sccs[28] = {
  &scc_info_BatchRollbackRequest_kvrpcpb_2eproto.base,
  &scc_info_BatchRollbackResponse_kvrpcpb_2eproto.base,
  &scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto.base,
  &scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto.base,
  &scc_info_CommitRequest_kvrpcpb_2eproto.base,
  &scc_info_CommitResponse_kvrpcpb_2eproto.base,
  &scc_info_Context_kvrpcpb_2eproto.base,
  &scc_info_GetRequest_kvrpcpb_2eproto.base,
  &scc_info_GetResponse_kvrpcpb_2eproto.base,
  &scc_info_KeyError_kvrpcpb_2eproto.base,
  &scc_info_KvPair_kvrpcpb_2eproto.base,
  &scc_info_LockInfo_kvrpcpb_2eproto.base,
  &scc_info_Mutation_kvrpcpb_2eproto.base,
  &scc_info_PrewriteRequest_kvrpcpb_2eproto.base,
  &scc_info_PrewriteResponse_kvrpcpb_2eproto.base,
  &scc_info_RawDeleteRequest_kvrpcpb_2eproto.base,
  &scc_info_RawDeleteResponse_kvrpcpb_2eproto.base,
  &scc_info_RawGetRequest_kvrpcpb_2eproto.base,
  &scc_info_RawGetResponse_kvrpcpb_2eproto.base,
  &scc_info_RawPutRequest_kvrpcpb_2eproto.base,
  &scc_info_RawPutResponse_kvrpcpb_2eproto.base,
  &scc_info_RawScanRequest_kvrpcpb_2eproto.base,
  &scc_info_RawScanResponse_kvrpcpb_2eproto.base,
  &scc_info_ResolveLockRequest_kvrpcpb_2eproto.base,
  &scc_info_ResolveLockResponse_kvrpcpb_2eproto.base,
  &scc_info_ScanRequest_kvrpcpb_2eproto.base,
  &scc_info_ScanResponse_kvrpcpb_2eproto.base,
  &scc_info_WriteConflict_kvrpcpb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kvrpcpb_2eproto_once;
static bool descriptor_table_kvrpcpb_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvrpcpb_2eproto = {
  &descriptor_table_kvrpcpb_2eproto_initialized, descriptor_table_protodef_kvrpcpb_2eproto, "kvrpcpb.proto", 2945,
  &descriptor_table_kvrpcpb_2eproto_once, descriptor_table_kvrpcpb_2eproto_sccs, descriptor_table_kvrpcpb_2eproto_deps, 28, 2,
  schemas, file_default_instances, TableStruct_kvrpcpb_2eproto::offsets,
  file_level_metadata_kvrpcpb_2eproto, 28, file_level_enum_descriptors_kvrpcpb_2eproto, file_level_service_descriptors_kvrpcpb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kvrpcpb_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kvrpcpb_2eproto), true);
namespace kvrpcpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvrpcpb_2eproto);
  return file_level_enum_descriptors_kvrpcpb_2eproto[0];
}
bool Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kvrpcpb_2eproto);
  return file_level_enum_descriptors_kvrpcpb_2eproto[1];
}
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RawGetRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_RawGetRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class RawGetRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const RawGetRequest* msg);
};

const ::kvrpcpb::Context&
RawGetRequest::HasBitSetters::context(const RawGetRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawGetRequest::kContextFieldNumber;
const int RawGetRequest::kKeyFieldNumber;
const int RawGetRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawGetRequest::RawGetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawGetRequest)
}
RawGetRequest::RawGetRequest(const RawGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawGetRequest)
}

void RawGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawGetRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_ = nullptr;
}

RawGetRequest::~RawGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawGetRequest)
  SharedDtor();
}

void RawGetRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawGetRequest& RawGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawGetRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cf(), ptr, ctx, "kvrpcpb.RawGetRequest.cf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawGetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawGetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cf = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawGetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawGetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetRequest.cf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawGetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawGetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetRequest.cf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->cf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawGetRequest)
  return target;
}

size_t RawGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawGetRequest)
    MergeFrom(*source);
  }
}

void RawGetRequest::MergeFrom(const RawGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
}

void RawGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGetRequest::CopyFrom(const RawGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGetRequest::IsInitialized() const {
  return true;
}

void RawGetRequest::Swap(RawGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawGetRequest::InternalSwap(RawGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawGetResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_RawGetResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class RawGetResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const RawGetResponse* msg);
};

const ::errorpb::Error&
RawGetResponse::HasBitSetters::region_error(const RawGetResponse* msg) {
  return *msg->region_error_;
}
void RawGetResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawGetResponse::kRegionErrorFieldNumber;
const int RawGetResponse::kErrorFieldNumber;
const int RawGetResponse::kValueFieldNumber;
const int RawGetResponse::kNotFoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawGetResponse::RawGetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawGetResponse)
}
RawGetResponse::RawGetResponse(const RawGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  not_found_ = from.not_found_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawGetResponse)
}

void RawGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawGetResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_found_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(not_found_));
}

RawGetResponse::~RawGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawGetResponse)
  SharedDtor();
}

void RawGetResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawGetResponse& RawGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawGetResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  not_found_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error(), ptr, ctx, "kvrpcpb.RawGetResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          not_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawGetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawGetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawGetResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool not_found = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawGetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetResponse.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->not_found(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawGetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawGetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetResponse.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->not_found(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawGetResponse)
  return target;
}

size_t RawGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawGetResponse)
    MergeFrom(*source);
  }
}

void RawGetResponse::MergeFrom(const RawGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.not_found() != 0) {
    set_not_found(from.not_found());
  }
}

void RawGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGetResponse::CopyFrom(const RawGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawGetResponse::IsInitialized() const {
  return true;
}

void RawGetResponse::Swap(RawGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawGetResponse::InternalSwap(RawGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_error_, other->region_error_);
  swap(not_found_, other->not_found_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawPutRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_RawPutRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class RawPutRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const RawPutRequest* msg);
};

const ::kvrpcpb::Context&
RawPutRequest::HasBitSetters::context(const RawPutRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawPutRequest::kContextFieldNumber;
const int RawPutRequest::kKeyFieldNumber;
const int RawPutRequest::kValueFieldNumber;
const int RawPutRequest::kCfFieldNumber;
const int RawPutRequest::kIdFieldNumber;
const int RawPutRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawPutRequest::RawPutRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawPutRequest)
}
RawPutRequest::RawPutRequest(const RawPutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawPutRequest)
}

void RawPutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawPutRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&context_)) + sizeof(type_));
}

RawPutRequest::~RawPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawPutRequest)
  SharedDtor();
}

void RawPutRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawPutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawPutRequest& RawPutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawPutRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawPutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawPutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cf(), ptr, ctx, "kvrpcpb.RawPutRequest.cf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawPutRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawPutRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cf = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawPutRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawPutRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawPutRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawPutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutRequest.cf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cf(), output);
  }

  // uint64 id = 5;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->id(), output);
  }

  // uint32 type = 6;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawPutRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawPutRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawPutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutRequest.cf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->cf(), target);
  }

  // uint64 id = 5;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->id(), target);
  }

  // uint32 type = 6;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawPutRequest)
  return target;
}

size_t RawPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawPutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint32 type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawPutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawPutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawPutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawPutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawPutRequest)
    MergeFrom(*source);
  }
}

void RawPutRequest::MergeFrom(const RawPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawPutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RawPutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawPutRequest::CopyFrom(const RawPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawPutRequest::IsInitialized() const {
  return true;
}

void RawPutRequest::Swap(RawPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawPutRequest::InternalSwap(RawPutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawPutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawPutResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_RawPutResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class RawPutResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const RawPutResponse* msg);
};

const ::errorpb::Error&
RawPutResponse::HasBitSetters::region_error(const RawPutResponse* msg) {
  return *msg->region_error_;
}
void RawPutResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawPutResponse::kRegionErrorFieldNumber;
const int RawPutResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawPutResponse::RawPutResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawPutResponse)
}
RawPutResponse::RawPutResponse(const RawPutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawPutResponse)
}

void RawPutResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawPutResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_error_ = nullptr;
}

RawPutResponse::~RawPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawPutResponse)
  SharedDtor();
}

void RawPutResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawPutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawPutResponse& RawPutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawPutResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawPutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawPutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error(), ptr, ctx, "kvrpcpb.RawPutResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawPutResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawPutResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawPutResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawPutResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawPutResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawPutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutResponse.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawPutResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawPutResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawPutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutResponse.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawPutResponse)
  return target;
}

size_t RawPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawPutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawPutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawPutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawPutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawPutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawPutResponse)
    MergeFrom(*source);
  }
}

void RawPutResponse::MergeFrom(const RawPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawPutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void RawPutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawPutResponse::CopyFrom(const RawPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawPutResponse::IsInitialized() const {
  return true;
}

void RawPutResponse::Swap(RawPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawPutResponse::InternalSwap(RawPutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawPutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawDeleteRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_RawDeleteRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class RawDeleteRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const RawDeleteRequest* msg);
};

const ::kvrpcpb::Context&
RawDeleteRequest::HasBitSetters::context(const RawDeleteRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawDeleteRequest::kContextFieldNumber;
const int RawDeleteRequest::kKeyFieldNumber;
const int RawDeleteRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawDeleteRequest::RawDeleteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawDeleteRequest)
}
RawDeleteRequest::RawDeleteRequest(const RawDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteRequest)
}

void RawDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawDeleteRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_ = nullptr;
}

RawDeleteRequest::~RawDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteRequest)
  SharedDtor();
}

void RawDeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawDeleteRequest& RawDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawDeleteRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cf(), ptr, ctx, "kvrpcpb.RawDeleteRequest.cf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawDeleteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawDeleteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cf = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawDeleteRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawDeleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawDeleteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRequest.cf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawDeleteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawDeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRequest.cf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->cf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteRequest)
  return target;
}

size_t RawDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteRequest)
    MergeFrom(*source);
  }
}

void RawDeleteRequest::MergeFrom(const RawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
}

void RawDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteRequest::CopyFrom(const RawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawDeleteRequest::IsInitialized() const {
  return true;
}

void RawDeleteRequest::Swap(RawDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawDeleteRequest::InternalSwap(RawDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawDeleteResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_RawDeleteResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class RawDeleteResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const RawDeleteResponse* msg);
};

const ::errorpb::Error&
RawDeleteResponse::HasBitSetters::region_error(const RawDeleteResponse* msg) {
  return *msg->region_error_;
}
void RawDeleteResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawDeleteResponse::kRegionErrorFieldNumber;
const int RawDeleteResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawDeleteResponse::RawDeleteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawDeleteResponse)
}
RawDeleteResponse::RawDeleteResponse(const RawDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteResponse)
}

void RawDeleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawDeleteResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_error_ = nullptr;
}

RawDeleteResponse::~RawDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteResponse)
  SharedDtor();
}

void RawDeleteResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawDeleteResponse& RawDeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawDeleteResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error(), ptr, ctx, "kvrpcpb.RawDeleteResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawDeleteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawDeleteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawDeleteResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawDeleteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawDeleteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteResponse.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawDeleteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawDeleteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteResponse.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteResponse)
  return target;
}

size_t RawDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawDeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawDeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteResponse)
    MergeFrom(*source);
  }
}

void RawDeleteResponse::MergeFrom(const RawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void RawDeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteResponse::CopyFrom(const RawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawDeleteResponse::IsInitialized() const {
  return true;
}

void RawDeleteResponse::Swap(RawDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawDeleteResponse::InternalSwap(RawDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawDeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawScanRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_RawScanRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class RawScanRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const RawScanRequest* msg);
};

const ::kvrpcpb::Context&
RawScanRequest::HasBitSetters::context(const RawScanRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawScanRequest::kContextFieldNumber;
const int RawScanRequest::kStartKeyFieldNumber;
const int RawScanRequest::kLimitFieldNumber;
const int RawScanRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawScanRequest::RawScanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawScanRequest)
}
RawScanRequest::RawScanRequest(const RawScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.cf().size() > 0) {
    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawScanRequest)
}

void RawScanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawScanRequest_kvrpcpb_2eproto.base);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&context_)) + sizeof(limit_));
}

RawScanRequest::~RawScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawScanRequest)
  SharedDtor();
}

void RawScanRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void RawScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawScanRequest& RawScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawScanRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_start_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_cf(), ptr, ctx, "kvrpcpb.RawScanRequest.cf");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawScanRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawScanRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cf = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), static_cast<int>(this->cf().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawScanRequest.cf"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawScanRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawScanRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanRequest.cf");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawScanRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawScanRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), static_cast<int>(this->cf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanRequest.cf");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->cf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawScanRequest)
  return target;
}

size_t RawScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawScanRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // string cf = 4;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RawScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawScanRequest)
    MergeFrom(*source);
  }
}

void RawScanRequest::MergeFrom(const RawScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void RawScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawScanRequest::CopyFrom(const RawScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawScanRequest::IsInitialized() const {
  return true;
}

void RawScanRequest::Swap(RawScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawScanRequest::InternalSwap(RawScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cf_.Swap(&other->cf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawScanResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_RawScanResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class RawScanResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const RawScanResponse* msg);
};

const ::errorpb::Error&
RawScanResponse::HasBitSetters::region_error(const RawScanResponse* msg) {
  return *msg->region_error_;
}
void RawScanResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawScanResponse::kRegionErrorFieldNumber;
const int RawScanResponse::kErrorFieldNumber;
const int RawScanResponse::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawScanResponse::RawScanResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawScanResponse)
}
RawScanResponse::RawScanResponse(const RawScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kvs_(from.kvs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawScanResponse)
}

void RawScanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawScanResponse_kvrpcpb_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_error_ = nullptr;
}

RawScanResponse::~RawScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawScanResponse)
  SharedDtor();
}

void RawScanResponse::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
}

void RawScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawScanResponse& RawScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawScanResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void RawScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RawScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_error(), ptr, ctx, "kvrpcpb.RawScanResponse.error");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.KvPair kvs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_kvs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RawScanResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawScanResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), static_cast<int>(this->error().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawScanResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.KvPair kvs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawScanResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RawScanResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanResponse.error");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // repeated .kvrpcpb.KvPair kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->kvs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawScanResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RawScanResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), static_cast<int>(this->error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanResponse.error");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // repeated .kvrpcpb.KvPair kvs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kvs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->kvs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawScanResponse)
  return target;
}

size_t RawScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawScanResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.KvPair kvs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kvs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->kvs(static_cast<int>(i)));
    }
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RawScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawScanResponse)
    MergeFrom(*source);
  }
}

void RawScanResponse::MergeFrom(const RawScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void RawScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawScanResponse::CopyFrom(const RawScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawScanResponse::IsInitialized() const {
  return true;
}

void RawScanResponse::Swap(RawScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawScanResponse::InternalSwap(RawScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&kvs_)->InternalSwap(CastToBase(&other->kvs_));
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_GetRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class GetRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const GetRequest* msg);
};

const ::kvrpcpb::Context&
GetRequest::HasBitSetters::context(const GetRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kContextFieldNumber;
const int GetRequest::kKeyFieldNumber;
const int GetRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GetRequest)
}

void GetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRequest_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(version_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRequest& GetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.GetRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.GetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.GetRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GetRequest)
    MergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void GetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_GetResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  ::kvrpcpb::_GetResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}
class GetResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const GetResponse* msg);
  static const ::kvrpcpb::KeyError& error(const GetResponse* msg);
};

const ::errorpb::Error&
GetResponse::HasBitSetters::region_error(const GetResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
GetResponse::HasBitSetters::error(const GetResponse* msg) {
  return *msg->error_;
}
void GetResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kRegionErrorFieldNumber;
const int GetResponse::kErrorFieldNumber;
const int GetResponse::kValueFieldNumber;
const int GetResponse::kNotFoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from.has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  not_found_ = from.not_found_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GetResponse)
}

void GetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResponse_kvrpcpb_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&region_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_found_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(not_found_));
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResponse& GetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  not_found_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          not_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.GetResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KeyError error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool not_found = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.GetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->not_found(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.GetResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->not_found(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // bool not_found = 4;
  if (this->not_found() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GetResponse)
    MergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
  if (from.not_found() != 0) {
    set_not_found(from.not_found());
  }
}

void GetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(region_error_, other->region_error_);
  swap(error_, other->error_);
  swap(not_found_, other->not_found_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrewriteRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_PrewriteRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class PrewriteRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const PrewriteRequest* msg);
};

const ::kvrpcpb::Context&
PrewriteRequest::HasBitSetters::context(const PrewriteRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrewriteRequest::kContextFieldNumber;
const int PrewriteRequest::kMutationsFieldNumber;
const int PrewriteRequest::kPrimaryLockFieldNumber;
const int PrewriteRequest::kStartVersionFieldNumber;
const int PrewriteRequest::kLockTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteRequest::PrewriteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.PrewriteRequest)
}
PrewriteRequest::PrewriteRequest(const PrewriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mutations_(from.mutations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.primary_lock().size() > 0) {
    primary_lock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&start_version_, &from.start_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_ttl_) -
    reinterpret_cast<char*>(&start_version_)) + sizeof(lock_ttl_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.PrewriteRequest)
}

void PrewriteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrewriteRequest_kvrpcpb_2eproto.base);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&context_)) + sizeof(lock_ttl_));
}

PrewriteRequest::~PrewriteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.PrewriteRequest)
  SharedDtor();
}

void PrewriteRequest::SharedDtor() {
  primary_lock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void PrewriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrewriteRequest& PrewriteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrewriteRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void PrewriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.PrewriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutations_.Clear();
  primary_lock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&start_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&start_version_)) + sizeof(lock_ttl_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrewriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.Mutation mutations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_mutations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // bytes primary_lock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_primary_lock(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ttl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lock_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrewriteRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.PrewriteRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.Mutation mutations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_lock = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_ttl = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.PrewriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.PrewriteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrewriteRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.PrewriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // repeated .kvrpcpb.Mutation mutations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mutations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->mutations(static_cast<int>(i)),
      output);
  }

  // bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary_lock(), output);
  }

  // uint64 start_version = 4;
  if (this->start_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->start_version(), output);
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->lock_ttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.PrewriteRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrewriteRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.PrewriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // repeated .kvrpcpb.Mutation mutations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mutations_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->mutations(static_cast<int>(i)), target);
  }

  // bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary_lock(), target);
  }

  // uint64 start_version = 4;
  if (this->start_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_version(), target);
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->lock_ttl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.PrewriteRequest)
  return target;
}

size_t PrewriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.PrewriteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.Mutation mutations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mutations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->mutations(static_cast<int>(i)));
    }
  }

  // bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->primary_lock());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 4;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->lock_ttl());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrewriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.PrewriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrewriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrewriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.PrewriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.PrewriteRequest)
    MergeFrom(*source);
  }
}

void PrewriteRequest::MergeFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.PrewriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutations_.MergeFrom(from.mutations_);
  if (from.primary_lock().size() > 0) {

    primary_lock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
  if (from.lock_ttl() != 0) {
    set_lock_ttl(from.lock_ttl());
  }
}

void PrewriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteRequest::CopyFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrewriteRequest::IsInitialized() const {
  return true;
}

void PrewriteRequest::Swap(PrewriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteRequest::InternalSwap(PrewriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&mutations_)->InternalSwap(CastToBase(&other->mutations_));
  primary_lock_.Swap(&other->primary_lock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
  swap(start_version_, other->start_version_);
  swap(lock_ttl_, other->lock_ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrewriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrewriteResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_PrewriteResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class PrewriteResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const PrewriteResponse* msg);
};

const ::errorpb::Error&
PrewriteResponse::HasBitSetters::region_error(const PrewriteResponse* msg) {
  return *msg->region_error_;
}
void PrewriteResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrewriteResponse::kRegionErrorFieldNumber;
const int PrewriteResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteResponse::PrewriteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.PrewriteResponse)
}
PrewriteResponse::PrewriteResponse(const PrewriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.PrewriteResponse)
}

void PrewriteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrewriteResponse_kvrpcpb_2eproto.base);
  region_error_ = nullptr;
}

PrewriteResponse::~PrewriteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.PrewriteResponse)
  SharedDtor();
}

void PrewriteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_error_;
}

void PrewriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrewriteResponse& PrewriteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrewriteResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void PrewriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.PrewriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PrewriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.KeyError errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PrewriteResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.PrewriteResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.KeyError errors = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.PrewriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.PrewriteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PrewriteResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.PrewriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // repeated .kvrpcpb.KeyError errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->errors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.PrewriteResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PrewriteResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.PrewriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // repeated .kvrpcpb.KeyError errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->errors(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.PrewriteResponse)
  return target;
}

size_t PrewriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.PrewriteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.KeyError errors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrewriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.PrewriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrewriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrewriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.PrewriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.PrewriteResponse)
    MergeFrom(*source);
  }
}

void PrewriteResponse::MergeFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.PrewriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void PrewriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteResponse::CopyFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrewriteResponse::IsInitialized() const {
  return true;
}

void PrewriteResponse::Swap(PrewriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteResponse::InternalSwap(PrewriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrewriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommitRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_CommitRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class CommitRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const CommitRequest* msg);
};

const ::kvrpcpb::Context&
CommitRequest::HasBitSetters::context(const CommitRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kContextFieldNumber;
const int CommitRequest::kStartVersionFieldNumber;
const int CommitRequest::kKeysFieldNumber;
const int CommitRequest::kCommitVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&start_version_, &from.start_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CommitRequest)
}

void CommitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitRequest_kvrpcpb_2eproto.base);
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(commit_version_));
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  if (this != internal_default_instance()) delete context_;
}

void CommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitRequest& CommitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CommitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&start_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_keys(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // uint64 commit_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          commit_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CommitRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keys = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CommitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CommitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }

  // uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->commit_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CommitRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CommitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->keys(i), target);
  }

  // uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->commit_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CommitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->commit_version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CommitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
  if (from.commit_version() != 0) {
    set_commit_version(from.commit_version());
  }
}

void CommitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  swap(context_, other->context_);
  swap(start_version_, other->start_version_);
  swap(commit_version_, other->commit_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommitResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_CommitResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  ::kvrpcpb::_CommitResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}
class CommitResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const CommitResponse* msg);
  static const ::kvrpcpb::KeyError& error(const CommitResponse* msg);
};

const ::errorpb::Error&
CommitResponse::HasBitSetters::region_error(const CommitResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
CommitResponse::HasBitSetters::error(const CommitResponse* msg) {
  return *msg->error_;
}
void CommitResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kRegionErrorFieldNumber;
const int CommitResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from.has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CommitResponse)
}

void CommitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommitResponse_kvrpcpb_2eproto.base);
  ::memset(&region_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(error_));
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void CommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommitResponse& CommitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommitResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommitResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CommitResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KeyError error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CommitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommitResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CommitResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommitResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CommitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CommitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CommitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void CommitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_error_, other->region_error_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_ScanRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class ScanRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const ScanRequest* msg);
};

const ::kvrpcpb::Context&
ScanRequest::HasBitSetters::context(const ScanRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanRequest::kContextFieldNumber;
const int ScanRequest::kStartKeyFieldNumber;
const int ScanRequest::kLimitFieldNumber;
const int ScanRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanRequest::ScanRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanRequest)
}
ScanRequest::ScanRequest(const ScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.start_key().size() > 0) {
    start_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&version_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanRequest)
}

void ScanRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanRequest_kvrpcpb_2eproto.base);
  start_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&context_)) + sizeof(limit_));
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanRequest)
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void ScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanRequest& ScanRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&version_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes start_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_start_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes start_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanRequest)
  return target;
}

size_t ScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanRequest)
    MergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanRequest::IsInitialized() const {
  return true;
}

void ScanRequest::Swap(ScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanRequest::InternalSwap(ScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_key_.Swap(&other->start_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
  swap(version_, other->version_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_ScanResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class ScanResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const ScanResponse* msg);
};

const ::errorpb::Error&
ScanResponse::HasBitSetters::region_error(const ScanResponse* msg) {
  return *msg->region_error_;
}
void ScanResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanResponse::kRegionErrorFieldNumber;
const int ScanResponse::kPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanResponse::ScanResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanResponse)
}
ScanResponse::ScanResponse(const ScanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanResponse)
}

void ScanResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanResponse_kvrpcpb_2eproto.base);
  region_error_ = nullptr;
}

ScanResponse::~ScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanResponse)
  SharedDtor();
}

void ScanResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_error_;
}

void ScanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanResponse& ScanResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kvrpcpb.KvPair pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .kvrpcpb.KvPair pairs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pairs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pairs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanResponse)
  return target;
}

size_t ScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kvrpcpb.KvPair pairs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pairs(static_cast<int>(i)));
    }
  }

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanResponse)
    MergeFrom(*source);
  }
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void ScanResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanResponse::IsInitialized() const {
  return true;
}

void ScanResponse::Swap(ScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanResponse::InternalSwap(ScanResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pairs_)->InternalSwap(CastToBase(&other->pairs_));
  swap(region_error_, other->region_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchRollbackRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_BatchRollbackRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class BatchRollbackRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const BatchRollbackRequest* msg);
};

const ::kvrpcpb::Context&
BatchRollbackRequest::HasBitSetters::context(const BatchRollbackRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRollbackRequest::kContextFieldNumber;
const int BatchRollbackRequest::kStartVersionFieldNumber;
const int BatchRollbackRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRollbackRequest::BatchRollbackRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchRollbackRequest)
}
BatchRollbackRequest::BatchRollbackRequest(const BatchRollbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  start_version_ = from.start_version_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchRollbackRequest)
}

void BatchRollbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchRollbackRequest_kvrpcpb_2eproto.base);
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(start_version_));
}

BatchRollbackRequest::~BatchRollbackRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchRollbackRequest)
  SharedDtor();
}

void BatchRollbackRequest::SharedDtor() {
  if (this != internal_default_instance()) delete context_;
}

void BatchRollbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRollbackRequest& BatchRollbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchRollbackRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void BatchRollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchRollbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  start_version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchRollbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_keys(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchRollbackRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchRollbackRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes keys = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchRollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchRollbackRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchRollbackRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchRollbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchRollbackRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchRollbackRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchRollbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchRollbackRequest)
  return target;
}

size_t BatchRollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchRollbackRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRollbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchRollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRollbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchRollbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchRollbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchRollbackRequest)
    MergeFrom(*source);
  }
}

void BatchRollbackRequest::MergeFrom(const BatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchRollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
}

void BatchRollbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchRollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRollbackRequest::CopyFrom(const BatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchRollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRollbackRequest::IsInitialized() const {
  return true;
}

void BatchRollbackRequest::Swap(BatchRollbackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRollbackRequest::InternalSwap(BatchRollbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  keys_.InternalSwap(CastToBase(&other->keys_));
  swap(context_, other->context_);
  swap(start_version_, other->start_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchRollbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatchRollbackResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_BatchRollbackResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  ::kvrpcpb::_BatchRollbackResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}
class BatchRollbackResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const BatchRollbackResponse* msg);
  static const ::kvrpcpb::KeyError& error(const BatchRollbackResponse* msg);
};

const ::errorpb::Error&
BatchRollbackResponse::HasBitSetters::region_error(const BatchRollbackResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
BatchRollbackResponse::HasBitSetters::error(const BatchRollbackResponse* msg) {
  return *msg->error_;
}
void BatchRollbackResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRollbackResponse::kRegionErrorFieldNumber;
const int BatchRollbackResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRollbackResponse::BatchRollbackResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchRollbackResponse)
}
BatchRollbackResponse::BatchRollbackResponse(const BatchRollbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from.has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchRollbackResponse)
}

void BatchRollbackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatchRollbackResponse_kvrpcpb_2eproto.base);
  ::memset(&region_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(error_));
}

BatchRollbackResponse::~BatchRollbackResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchRollbackResponse)
  SharedDtor();
}

void BatchRollbackResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void BatchRollbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatchRollbackResponse& BatchRollbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatchRollbackResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void BatchRollbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchRollbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatchRollbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatchRollbackResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchRollbackResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KeyError error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchRollbackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchRollbackResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatchRollbackResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchRollbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchRollbackResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchRollbackResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchRollbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchRollbackResponse)
  return target;
}

size_t BatchRollbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchRollbackResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchRollbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchRollbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchRollbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchRollbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchRollbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchRollbackResponse)
    MergeFrom(*source);
  }
}

void BatchRollbackResponse::MergeFrom(const BatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchRollbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void BatchRollbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchRollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRollbackResponse::CopyFrom(const BatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchRollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRollbackResponse::IsInitialized() const {
  return true;
}

void BatchRollbackResponse::Swap(BatchRollbackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRollbackResponse::InternalSwap(BatchRollbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_error_, other->region_error_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchRollbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckTxnStatusRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_CheckTxnStatusRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class CheckTxnStatusRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const CheckTxnStatusRequest* msg);
};

const ::kvrpcpb::Context&
CheckTxnStatusRequest::HasBitSetters::context(const CheckTxnStatusRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckTxnStatusRequest::kContextFieldNumber;
const int CheckTxnStatusRequest::kPrimaryKeyFieldNumber;
const int CheckTxnStatusRequest::kLockTsFieldNumber;
const int CheckTxnStatusRequest::kCurrentTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckTxnStatusRequest::CheckTxnStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CheckTxnStatusRequest)
}
CheckTxnStatusRequest::CheckTxnStatusRequest(const CheckTxnStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  primary_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.primary_key().size() > 0) {
    primary_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&lock_ts_, &from.lock_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_ts_) -
    reinterpret_cast<char*>(&lock_ts_)) + sizeof(current_ts_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CheckTxnStatusRequest)
}

void CheckTxnStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto.base);
  primary_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_ts_) -
      reinterpret_cast<char*>(&context_)) + sizeof(current_ts_));
}

CheckTxnStatusRequest::~CheckTxnStatusRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CheckTxnStatusRequest)
  SharedDtor();
}

void CheckTxnStatusRequest::SharedDtor() {
  primary_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void CheckTxnStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckTxnStatusRequest& CheckTxnStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckTxnStatusRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CheckTxnStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CheckTxnStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&lock_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_ts_) -
      reinterpret_cast<char*>(&lock_ts_)) + sizeof(current_ts_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckTxnStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes primary_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_primary_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lock_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_ts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          current_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckTxnStatusRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CheckTxnStatusRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_ts = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 current_ts = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CheckTxnStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CheckTxnStatusRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckTxnStatusRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CheckTxnStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->primary_key(), output);
  }

  // uint64 lock_ts = 3;
  if (this->lock_ts() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->lock_ts(), output);
  }

  // uint64 current_ts = 4;
  if (this->current_ts() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->current_ts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CheckTxnStatusRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckTxnStatusRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CheckTxnStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->primary_key(), target);
  }

  // uint64 lock_ts = 3;
  if (this->lock_ts() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->lock_ts(), target);
  }

  // uint64 current_ts = 4;
  if (this->current_ts() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->current_ts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CheckTxnStatusRequest)
  return target;
}

size_t CheckTxnStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CheckTxnStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes primary_key = 2;
  if (this->primary_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->primary_key());
  }

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 lock_ts = 3;
  if (this->lock_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->lock_ts());
  }

  // uint64 current_ts = 4;
  if (this->current_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->current_ts());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckTxnStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CheckTxnStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckTxnStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckTxnStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CheckTxnStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CheckTxnStatusRequest)
    MergeFrom(*source);
  }
}

void CheckTxnStatusRequest::MergeFrom(const CheckTxnStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CheckTxnStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.primary_key().size() > 0) {

    primary_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_key_);
  }
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.lock_ts() != 0) {
    set_lock_ts(from.lock_ts());
  }
  if (from.current_ts() != 0) {
    set_current_ts(from.current_ts());
  }
}

void CheckTxnStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CheckTxnStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckTxnStatusRequest::CopyFrom(const CheckTxnStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CheckTxnStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTxnStatusRequest::IsInitialized() const {
  return true;
}

void CheckTxnStatusRequest::Swap(CheckTxnStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckTxnStatusRequest::InternalSwap(CheckTxnStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  primary_key_.Swap(&other->primary_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(context_, other->context_);
  swap(lock_ts_, other->lock_ts_);
  swap(current_ts_, other->current_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckTxnStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckTxnStatusResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_CheckTxnStatusResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}
class CheckTxnStatusResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const CheckTxnStatusResponse* msg);
};

const ::errorpb::Error&
CheckTxnStatusResponse::HasBitSetters::region_error(const CheckTxnStatusResponse* msg) {
  return *msg->region_error_;
}
void CheckTxnStatusResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckTxnStatusResponse::kRegionErrorFieldNumber;
const int CheckTxnStatusResponse::kLockTtlFieldNumber;
const int CheckTxnStatusResponse::kCommitVersionFieldNumber;
const int CheckTxnStatusResponse::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckTxnStatusResponse::CheckTxnStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CheckTxnStatusResponse)
}
CheckTxnStatusResponse::CheckTxnStatusResponse(const CheckTxnStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  ::memcpy(&lock_ttl_, &from.lock_ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&lock_ttl_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CheckTxnStatusResponse)
}

void CheckTxnStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto.base);
  ::memset(&region_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(action_));
}

CheckTxnStatusResponse::~CheckTxnStatusResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CheckTxnStatusResponse)
  SharedDtor();
}

void CheckTxnStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_error_;
}

void CheckTxnStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckTxnStatusResponse& CheckTxnStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckTxnStatusResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void CheckTxnStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CheckTxnStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  ::memset(&lock_ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&lock_ttl_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckTxnStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lock_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          commit_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.Action action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::kvrpcpb::Action>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckTxnStatusResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CheckTxnStatusResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_ttl = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.Action action = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::kvrpcpb::Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CheckTxnStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CheckTxnStatusResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckTxnStatusResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CheckTxnStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // uint64 lock_ttl = 2;
  if (this->lock_ttl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->lock_ttl(), output);
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->commit_version(), output);
  }

  // .kvrpcpb.Action action = 4;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.CheckTxnStatusResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckTxnStatusResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CheckTxnStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // uint64 lock_ttl = 2;
  if (this->lock_ttl() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->lock_ttl(), target);
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit_version(), target);
  }

  // .kvrpcpb.Action action = 4;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CheckTxnStatusResponse)
  return target;
}

size_t CheckTxnStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CheckTxnStatusResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // uint64 lock_ttl = 2;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->lock_ttl());
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->commit_version());
  }

  // .kvrpcpb.Action action = 4;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckTxnStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CheckTxnStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckTxnStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckTxnStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CheckTxnStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CheckTxnStatusResponse)
    MergeFrom(*source);
  }
}

void CheckTxnStatusResponse::MergeFrom(const CheckTxnStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CheckTxnStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.lock_ttl() != 0) {
    set_lock_ttl(from.lock_ttl());
  }
  if (from.commit_version() != 0) {
    set_commit_version(from.commit_version());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void CheckTxnStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CheckTxnStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckTxnStatusResponse::CopyFrom(const CheckTxnStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CheckTxnStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckTxnStatusResponse::IsInitialized() const {
  return true;
}

void CheckTxnStatusResponse::Swap(CheckTxnStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckTxnStatusResponse::InternalSwap(CheckTxnStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_error_, other->region_error_);
  swap(lock_ttl_, other->lock_ttl_);
  swap(commit_version_, other->commit_version_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckTxnStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolveLockRequest::InitAsDefaultInstance() {
  ::kvrpcpb::_ResolveLockRequest_default_instance_._instance.get_mutable()->context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}
class ResolveLockRequest::HasBitSetters {
 public:
  static const ::kvrpcpb::Context& context(const ResolveLockRequest* msg);
};

const ::kvrpcpb::Context&
ResolveLockRequest::HasBitSetters::context(const ResolveLockRequest* msg) {
  return *msg->context_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveLockRequest::kContextFieldNumber;
const int ResolveLockRequest::kStartVersionFieldNumber;
const int ResolveLockRequest::kCommitVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveLockRequest::ResolveLockRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ResolveLockRequest)
}
ResolveLockRequest::ResolveLockRequest(const ResolveLockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_context()) {
    context_ = new ::kvrpcpb::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  ::memcpy(&start_version_, &from.start_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ResolveLockRequest)
}

void ResolveLockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveLockRequest_kvrpcpb_2eproto.base);
  ::memset(&context_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&context_)) + sizeof(commit_version_));
}

ResolveLockRequest::~ResolveLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ResolveLockRequest)
  SharedDtor();
}

void ResolveLockRequest::SharedDtor() {
  if (this != internal_default_instance()) delete context_;
}

void ResolveLockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveLockRequest& ResolveLockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveLockRequest_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ResolveLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ResolveLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  ::memset(&start_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commit_version_) -
      reinterpret_cast<char*>(&start_version_)) + sizeof(commit_version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResolveLockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Context context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commit_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          commit_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResolveLockRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ResolveLockRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Context context = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 start_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ResolveLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ResolveLockRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResolveLockRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ResolveLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::context(this), output);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->commit_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.ResolveLockRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveLockRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ResolveLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::context(this), target);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ResolveLockRequest)
  return target;
}

size_t ResolveLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ResolveLockRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  // uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->commit_version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveLockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ResolveLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveLockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveLockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ResolveLockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ResolveLockRequest)
    MergeFrom(*source);
  }
}

void ResolveLockRequest::MergeFrom(const ResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ResolveLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
  if (from.commit_version() != 0) {
    set_commit_version(from.commit_version());
  }
}

void ResolveLockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ResolveLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLockRequest::CopyFrom(const ResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ResolveLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveLockRequest::IsInitialized() const {
  return true;
}

void ResolveLockRequest::Swap(ResolveLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveLockRequest::InternalSwap(ResolveLockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(context_, other->context_);
  swap(start_version_, other->start_version_);
  swap(commit_version_, other->commit_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveLockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResolveLockResponse::InitAsDefaultInstance() {
  ::kvrpcpb::_ResolveLockResponse_default_instance_._instance.get_mutable()->region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  ::kvrpcpb::_ResolveLockResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}
class ResolveLockResponse::HasBitSetters {
 public:
  static const ::errorpb::Error& region_error(const ResolveLockResponse* msg);
  static const ::kvrpcpb::KeyError& error(const ResolveLockResponse* msg);
};

const ::errorpb::Error&
ResolveLockResponse::HasBitSetters::region_error(const ResolveLockResponse* msg) {
  return *msg->region_error_;
}
const ::kvrpcpb::KeyError&
ResolveLockResponse::HasBitSetters::error(const ResolveLockResponse* msg) {
  return *msg->error_;
}
void ResolveLockResponse::clear_region_error() {
  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveLockResponse::kRegionErrorFieldNumber;
const int ResolveLockResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveLockResponse::ResolveLockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ResolveLockResponse)
}
ResolveLockResponse::ResolveLockResponse(const ResolveLockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_error()) {
    region_error_ = new ::errorpb::Error(*from.region_error_);
  } else {
    region_error_ = nullptr;
  }
  if (from.has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ResolveLockResponse)
}

void ResolveLockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResolveLockResponse_kvrpcpb_2eproto.base);
  ::memset(&region_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&region_error_)) + sizeof(error_));
}

ResolveLockResponse::~ResolveLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ResolveLockResponse)
  SharedDtor();
}

void ResolveLockResponse::SharedDtor() {
  if (this != internal_default_instance()) delete region_error_;
  if (this != internal_default_instance()) delete error_;
}

void ResolveLockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResolveLockResponse& ResolveLockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResolveLockResponse_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void ResolveLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ResolveLockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_error_ != nullptr) {
    delete region_error_;
  }
  region_error_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResolveLockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .errorpb.Error region_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_region_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.KeyError error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResolveLockResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ResolveLockResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .errorpb.Error region_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.KeyError error = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ResolveLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ResolveLockResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResolveLockResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ResolveLockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::region_error(this), output);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.ResolveLockResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResolveLockResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ResolveLockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::region_error(this), target);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ResolveLockResponse)
  return target;
}

size_t ResolveLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ResolveLockResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_error_);
  }

  // .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResolveLockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ResolveLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResolveLockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResolveLockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ResolveLockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ResolveLockResponse)
    MergeFrom(*source);
  }
}

void ResolveLockResponse::MergeFrom(const ResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ResolveLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void ResolveLockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ResolveLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLockResponse::CopyFrom(const ResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ResolveLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveLockResponse::IsInitialized() const {
  return true;
}

void ResolveLockResponse::Swap(ResolveLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveLockResponse::InternalSwap(ResolveLockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_error_, other->region_error_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResolveLockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KvPair::InitAsDefaultInstance() {
  ::kvrpcpb::_KvPair_default_instance_._instance.get_mutable()->error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}
class KvPair::HasBitSetters {
 public:
  static const ::kvrpcpb::KeyError& error(const KvPair* msg);
};

const ::kvrpcpb::KeyError&
KvPair::HasBitSetters::error(const KvPair* msg) {
  return *msg->error_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvPair::kErrorFieldNumber;
const int KvPair::kKeyFieldNumber;
const int KvPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvPair::KvPair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvPair)
}
KvPair::KvPair(const KvPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_error()) {
    error_ = new ::kvrpcpb::KeyError(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvPair)
}

void KvPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KvPair_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = nullptr;
}

KvPair::~KvPair() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvPair)
  SharedDtor();
}

void KvPair::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void KvPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KvPair& KvPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KvPair_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void KvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KvPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.KeyError error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KvPair::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvPair)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.KeyError error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KvPair::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvPair)
}

::PROTOBUF_NAMESPACE_ID::uint8* KvPair::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvPair)
  return target;
}

size_t KvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KvPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KvPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvPair)
    MergeFrom(*source);
  }
}

void KvPair::MergeFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void KvPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPair::CopyFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPair::IsInitialized() const {
  return true;
}

void KvPair::Swap(KvPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvPair::InternalSwap(KvPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KvPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mutation::InitAsDefaultInstance() {
}
class Mutation::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kOpFieldNumber;
const int Mutation::kKeyFieldNumber;
const int Mutation::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Mutation)
}
Mutation::Mutation(const Mutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Mutation)
}

void Mutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mutation_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mutation& Mutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mutation_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Mutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.Op op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_op(static_cast<::kvrpcpb::Op>(val));
        } else goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Mutation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Mutation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.Op op = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::kvrpcpb::Op >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Mutation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Mutation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Mutation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Mutation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Mutation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->op());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  const Mutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Mutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Mutation)
    MergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
}

void Mutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mutation::IsInitialized() const {
  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyError::InitAsDefaultInstance() {
  ::kvrpcpb::_KeyError_default_instance_._instance.get_mutable()->locked_ = const_cast< ::kvrpcpb::LockInfo*>(
      ::kvrpcpb::LockInfo::internal_default_instance());
  ::kvrpcpb::_KeyError_default_instance_._instance.get_mutable()->conflict_ = const_cast< ::kvrpcpb::WriteConflict*>(
      ::kvrpcpb::WriteConflict::internal_default_instance());
}
class KeyError::HasBitSetters {
 public:
  static const ::kvrpcpb::LockInfo& locked(const KeyError* msg);
  static const ::kvrpcpb::WriteConflict& conflict(const KeyError* msg);
};

const ::kvrpcpb::LockInfo&
KeyError::HasBitSetters::locked(const KeyError* msg) {
  return *msg->locked_;
}
const ::kvrpcpb::WriteConflict&
KeyError::HasBitSetters::conflict(const KeyError* msg) {
  return *msg->conflict_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyError::kLockedFieldNumber;
const int KeyError::kRetryableFieldNumber;
const int KeyError::kAbortFieldNumber;
const int KeyError::kConflictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyError::KeyError()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KeyError)
}
KeyError::KeyError(const KeyError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retryable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.retryable().size() > 0) {
    retryable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.retryable_);
  }
  abort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.abort().size() > 0) {
    abort_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.abort_);
  }
  if (from.has_locked()) {
    locked_ = new ::kvrpcpb::LockInfo(*from.locked_);
  } else {
    locked_ = nullptr;
  }
  if (from.has_conflict()) {
    conflict_ = new ::kvrpcpb::WriteConflict(*from.conflict_);
  } else {
    conflict_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KeyError)
}

void KeyError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyError_kvrpcpb_2eproto.base);
  retryable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&locked_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conflict_) -
      reinterpret_cast<char*>(&locked_)) + sizeof(conflict_));
}

KeyError::~KeyError() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KeyError)
  SharedDtor();
}

void KeyError::SharedDtor() {
  retryable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abort_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locked_;
  if (this != internal_default_instance()) delete conflict_;
}

void KeyError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyError& KeyError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyError_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void KeyError::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KeyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retryable_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abort_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && locked_ != nullptr) {
    delete locked_;
  }
  locked_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && conflict_ != nullptr) {
    delete conflict_;
  }
  conflict_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeyError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kvrpcpb.LockInfo locked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string retryable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_retryable(), ptr, ctx, "kvrpcpb.KeyError.retryable");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string abort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_abort(), ptr, ctx, "kvrpcpb.KeyError.abort");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kvrpcpb.WriteConflict conflict = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_conflict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeyError::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KeyError)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .kvrpcpb.LockInfo locked = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_locked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string retryable = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_retryable()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->retryable().data(), static_cast<int>(this->retryable().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.KeyError.retryable"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string abort = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_abort()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->abort().data(), static_cast<int>(this->abort().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "kvrpcpb.KeyError.abort"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .kvrpcpb.WriteConflict conflict = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_conflict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KeyError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KeyError)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeyError::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KeyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::locked(this), output);
  }

  // string retryable = 2;
  if (this->retryable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->retryable().data(), static_cast<int>(this->retryable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.retryable");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retryable(), output);
  }

  // string abort = 3;
  if (this->abort().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->abort().data(), static_cast<int>(this->abort().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.abort");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abort(), output);
  }

  // .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::conflict(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.KeyError)
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyError::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KeyError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::locked(this), target);
  }

  // string retryable = 2;
  if (this->retryable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->retryable().data(), static_cast<int>(this->retryable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.retryable");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->retryable(), target);
  }

  // string abort = 3;
  if (this->abort().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->abort().data(), static_cast<int>(this->abort().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.abort");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->abort(), target);
  }

  // .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::conflict(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KeyError)
  return target;
}

size_t KeyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KeyError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string retryable = 2;
  if (this->retryable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->retryable());
  }

  // string abort = 3;
  if (this->abort().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->abort());
  }

  // .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locked_);
  }

  // .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conflict_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KeyError)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KeyError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KeyError)
    MergeFrom(*source);
  }
}

void KeyError::MergeFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KeyError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retryable().size() > 0) {

    retryable_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.retryable_);
  }
  if (from.abort().size() > 0) {

    abort_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.abort_);
  }
  if (from.has_locked()) {
    mutable_locked()->::kvrpcpb::LockInfo::MergeFrom(from.locked());
  }
  if (from.has_conflict()) {
    mutable_conflict()->::kvrpcpb::WriteConflict::MergeFrom(from.conflict());
  }
}

void KeyError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyError::CopyFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyError::IsInitialized() const {
  return true;
}

void KeyError::Swap(KeyError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyError::InternalSwap(KeyError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  retryable_.Swap(&other->retryable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  abort_.Swap(&other->abort_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(locked_, other->locked_);
  swap(conflict_, other->conflict_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockInfo::InitAsDefaultInstance() {
}
class LockInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInfo::kPrimaryLockFieldNumber;
const int LockInfo::kLockVersionFieldNumber;
const int LockInfo::kKeyFieldNumber;
const int LockInfo::kLockTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInfo::LockInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockInfo)
}
LockInfo::LockInfo(const LockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.primary_lock().size() > 0) {
    primary_lock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&lock_version_, &from.lock_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&lock_ttl_) -
    reinterpret_cast<char*>(&lock_version_)) + sizeof(lock_ttl_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockInfo)
}

void LockInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockInfo_kvrpcpb_2eproto.base);
  primary_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&lock_version_)) + sizeof(lock_ttl_));
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockInfo)
  SharedDtor();
}

void LockInfo::SharedDtor() {
  primary_lock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockInfo& LockInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockInfo_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  primary_lock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lock_ttl_) -
      reinterpret_cast<char*>(&lock_version_)) + sizeof(lock_ttl_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes primary_lock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_primary_lock(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lock_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_ttl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lock_ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LockInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes primary_lock = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lock_ttl = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LockInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->primary_lock(), output);
  }

  // uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->lock_version(), output);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->lock_ttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* LockInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->primary_lock(), target);
  }

  // uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->lock_version(), target);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->lock_ttl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->primary_lock());
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->lock_version());
  }

  // uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->lock_ttl());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockInfo)
    MergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.primary_lock().size() > 0) {

    primary_lock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.lock_version() != 0) {
    set_lock_version(from.lock_version());
  }
  if (from.lock_ttl() != 0) {
    set_lock_ttl(from.lock_ttl());
  }
}

void LockInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo::IsInitialized() const {
  return true;
}

void LockInfo::Swap(LockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInfo::InternalSwap(LockInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  primary_lock_.Swap(&other->primary_lock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lock_version_, other->lock_version_);
  swap(lock_ttl_, other->lock_ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteConflict::InitAsDefaultInstance() {
}
class WriteConflict::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteConflict::kStartTsFieldNumber;
const int WriteConflict::kConflictTsFieldNumber;
const int WriteConflict::kKeyFieldNumber;
const int WriteConflict::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteConflict::WriteConflict()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.WriteConflict)
}
WriteConflict::WriteConflict(const WriteConflict& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.primary().size() > 0) {
    primary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_);
  }
  ::memcpy(&start_ts_, &from.start_ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&conflict_ts_) -
    reinterpret_cast<char*>(&start_ts_)) + sizeof(conflict_ts_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.WriteConflict)
}

void WriteConflict::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteConflict_kvrpcpb_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conflict_ts_) -
      reinterpret_cast<char*>(&start_ts_)) + sizeof(conflict_ts_));
}

WriteConflict::~WriteConflict() {
  // @@protoc_insertion_point(destructor:kvrpcpb.WriteConflict)
  SharedDtor();
}

void WriteConflict::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteConflict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteConflict& WriteConflict::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteConflict_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void WriteConflict::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.WriteConflict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conflict_ts_) -
      reinterpret_cast<char*>(&start_ts_)) + sizeof(conflict_ts_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteConflict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 conflict_ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          conflict_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes primary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_primary(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteConflict::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.WriteConflict)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_ts = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 conflict_ts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conflict_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes primary = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.WriteConflict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.WriteConflict)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteConflict::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.WriteConflict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->conflict_ts(), output);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // bytes primary = 4;
  if (this->primary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.WriteConflict)
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteConflict::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.WriteConflict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ts(), target);
  }

  // uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->conflict_ts(), target);
  }

  // bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // bytes primary = 4;
  if (this->primary().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.WriteConflict)
  return target;
}

size_t WriteConflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.WriteConflict)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes primary = 4;
  if (this->primary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->primary());
  }

  // uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  // uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->conflict_ts());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteConflict::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.WriteConflict)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteConflict* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteConflict>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.WriteConflict)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.WriteConflict)
    MergeFrom(*source);
  }
}

void WriteConflict::MergeFrom(const WriteConflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.WriteConflict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.primary().size() > 0) {

    primary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primary_);
  }
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
  if (from.conflict_ts() != 0) {
    set_conflict_ts(from.conflict_ts());
  }
}

void WriteConflict::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.WriteConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteConflict::CopyFrom(const WriteConflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.WriteConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteConflict::IsInitialized() const {
  return true;
}

void WriteConflict::Swap(WriteConflict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteConflict::InternalSwap(WriteConflict* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  primary_.Swap(&other->primary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_ts_, other->start_ts_);
  swap(conflict_ts_, other->conflict_ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteConflict::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Context::InitAsDefaultInstance() {
  ::kvrpcpb::_Context_default_instance_._instance.get_mutable()->region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
  ::kvrpcpb::_Context_default_instance_._instance.get_mutable()->peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}
class Context::HasBitSetters {
 public:
  static const ::metapb::RegionEpoch& region_epoch(const Context* msg);
  static const ::metapb::Peer& peer(const Context* msg);
};

const ::metapb::RegionEpoch&
Context::HasBitSetters::region_epoch(const Context* msg) {
  return *msg->region_epoch_;
}
const ::metapb::Peer&
Context::HasBitSetters::peer(const Context* msg) {
  return *msg->peer_;
}
void Context::clear_region_epoch() {
  if (GetArenaNoVirtual() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
}
void Context::clear_peer() {
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Context::kRegionIdFieldNumber;
const int Context::kRegionEpochFieldNumber;
const int Context::kPeerFieldNumber;
const int Context::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Context::Context()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Context)
}
Context::Context(const Context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_region_epoch()) {
    region_epoch_ = new ::metapb::RegionEpoch(*from.region_epoch_);
  } else {
    region_epoch_ = nullptr;
  }
  if (from.has_peer()) {
    peer_ = new ::metapb::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  ::memcpy(&region_id_, &from.region_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&region_id_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Context)
}

void Context::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Context_kvrpcpb_2eproto.base);
  ::memset(&region_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&region_epoch_)) + sizeof(term_));
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Context)
  SharedDtor();
}

void Context::SharedDtor() {
  if (this != internal_default_instance()) delete region_epoch_;
  if (this != internal_default_instance()) delete peer_;
}

void Context::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Context& Context::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Context_kvrpcpb_2eproto.base);
  return *internal_default_instance();
}


void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && region_epoch_ != nullptr) {
    delete region_epoch_;
  }
  region_epoch_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  ::memset(&region_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&region_id_)) + sizeof(term_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Context::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 region_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.RegionEpoch region_epoch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_region_epoch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .metapb.Peer peer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_peer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 term = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Context::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Context)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 region_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.RegionEpoch region_epoch = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .metapb.Peer peer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Context)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Context::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::region_epoch(this), output);
  }

  // .metapb.Peer peer = 3;
  if (this->has_peer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::peer(this), output);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:kvrpcpb.Context)
}

::PROTOBUF_NAMESPACE_ID::uint8* Context::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::region_epoch(this), target);
  }

  // .metapb.Peer peer = 3;
  if (this->has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::peer(this), target);
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Context)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_epoch_);
  }

  // .metapb.Peer peer = 3;
  if (this->has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Context::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Context)
  GOOGLE_DCHECK_NE(&from, this);
  const Context* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Context>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Context)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Context)
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Context)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void Context::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::Swap(Context* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Context::InternalSwap(Context* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(region_epoch_, other->region_epoch_);
  swap(peer_, other->peer_);
  swap(region_id_, other->region_id_);
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Context::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kvrpcpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawGetRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawGetResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawPutRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawPutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawPutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawPutResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawPutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawPutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawDeleteRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawDeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawDeleteResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawDeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawDeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawScanRequest* Arena::CreateMaybeMessage< ::kvrpcpb::RawScanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::RawScanResponse* Arena::CreateMaybeMessage< ::kvrpcpb::RawScanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::RawScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::GetRequest* Arena::CreateMaybeMessage< ::kvrpcpb::GetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::GetResponse* Arena::CreateMaybeMessage< ::kvrpcpb::GetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::PrewriteRequest* Arena::CreateMaybeMessage< ::kvrpcpb::PrewriteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::PrewriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::PrewriteResponse* Arena::CreateMaybeMessage< ::kvrpcpb::PrewriteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::PrewriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CommitRequest* Arena::CreateMaybeMessage< ::kvrpcpb::CommitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::CommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CommitResponse* Arena::CreateMaybeMessage< ::kvrpcpb::CommitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::CommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ScanRequest* Arena::CreateMaybeMessage< ::kvrpcpb::ScanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::ScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ScanResponse* Arena::CreateMaybeMessage< ::kvrpcpb::ScanResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::ScanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::BatchRollbackRequest* Arena::CreateMaybeMessage< ::kvrpcpb::BatchRollbackRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::BatchRollbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::BatchRollbackResponse* Arena::CreateMaybeMessage< ::kvrpcpb::BatchRollbackResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::BatchRollbackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CheckTxnStatusRequest* Arena::CreateMaybeMessage< ::kvrpcpb::CheckTxnStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::CheckTxnStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::CheckTxnStatusResponse* Arena::CreateMaybeMessage< ::kvrpcpb::CheckTxnStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::CheckTxnStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ResolveLockRequest* Arena::CreateMaybeMessage< ::kvrpcpb::ResolveLockRequest >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::ResolveLockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::ResolveLockResponse* Arena::CreateMaybeMessage< ::kvrpcpb::ResolveLockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::ResolveLockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::KvPair* Arena::CreateMaybeMessage< ::kvrpcpb::KvPair >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::KvPair >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::Mutation* Arena::CreateMaybeMessage< ::kvrpcpb::Mutation >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::Mutation >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::KeyError* Arena::CreateMaybeMessage< ::kvrpcpb::KeyError >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::KeyError >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::LockInfo* Arena::CreateMaybeMessage< ::kvrpcpb::LockInfo >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::LockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::WriteConflict* Arena::CreateMaybeMessage< ::kvrpcpb::WriteConflict >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::WriteConflict >(arena);
}
template<> PROTOBUF_NOINLINE ::kvrpcpb::Context* Arena::CreateMaybeMessage< ::kvrpcpb::Context >(Arena* arena) {
  return Arena::CreateInternal< ::kvrpcpb::Context >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
