// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eraftpb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eraftpb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eraftpb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eraftpb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eraftpb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eraftpb_2eproto;
namespace eraftpb {
class ConfChange;
class ConfChangeDefaultTypeInternal;
extern ConfChangeDefaultTypeInternal _ConfChange_default_instance_;
class ConfState;
class ConfStateDefaultTypeInternal;
extern ConfStateDefaultTypeInternal _ConfState_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class HardState;
class HardStateDefaultTypeInternal;
extern HardStateDefaultTypeInternal _HardState_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class SnapshotMetadata;
class SnapshotMetadataDefaultTypeInternal;
extern SnapshotMetadataDefaultTypeInternal _SnapshotMetadata_default_instance_;
}  // namespace eraftpb
PROTOBUF_NAMESPACE_OPEN
template<> ::eraftpb::ConfChange* Arena::CreateMaybeMessage<::eraftpb::ConfChange>(Arena*);
template<> ::eraftpb::ConfState* Arena::CreateMaybeMessage<::eraftpb::ConfState>(Arena*);
template<> ::eraftpb::Entry* Arena::CreateMaybeMessage<::eraftpb::Entry>(Arena*);
template<> ::eraftpb::HardState* Arena::CreateMaybeMessage<::eraftpb::HardState>(Arena*);
template<> ::eraftpb::Message* Arena::CreateMaybeMessage<::eraftpb::Message>(Arena*);
template<> ::eraftpb::Snapshot* Arena::CreateMaybeMessage<::eraftpb::Snapshot>(Arena*);
template<> ::eraftpb::SnapshotMetadata* Arena::CreateMaybeMessage<::eraftpb::SnapshotMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace eraftpb {

enum EntryType : int {
  EntryNormal = 0,
  EntryConfChange = 1,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = EntryNormal;
constexpr EntryType EntryType_MAX = EntryConfChange;
constexpr int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor();
template<typename T>
inline const std::string& EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryType_descriptor(), enum_t_value);
}
inline bool EntryType_Parse(
    const std::string& name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum MessageType : int {
  MsgHup = 0,
  MsgBeat = 1,
  MsgPropose = 2,
  MsgAppend = 3,
  MsgAppendResponse = 4,
  MsgRequestVote = 5,
  MsgRequestVoteResponse = 6,
  MsgSnapshot = 7,
  MsgHeartbeat = 8,
  MsgHeartbeatResponse = 9,
  MsgTransferLeader = 11,
  MsgTimeoutNow = 12,
  MsgEntryConfChange = 13,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MsgHup;
constexpr MessageType MessageType_MAX = MsgEntryConfChange;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ConfChangeType : int {
  AddNode = 0,
  RemoveNode = 1,
  ConfChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ConfChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ConfChangeType_IsValid(int value);
constexpr ConfChangeType ConfChangeType_MIN = AddNode;
constexpr ConfChangeType ConfChangeType_MAX = RemoveNode;
constexpr int ConfChangeType_ARRAYSIZE = ConfChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfChangeType_descriptor();
template<typename T>
inline const std::string& ConfChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfChangeType_descriptor(), enum_t_value);
}
inline bool ConfChangeType_Parse(
    const std::string& name, ConfChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfChangeType>(
    ConfChangeType_descriptor(), name, value);
}
// ===================================================================

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftpb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Entry* other);
  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftpb.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftpb_2eproto);
    return ::descriptor_table_eraftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .eraftpb.EntryType entry_type = 1;
  void clear_entry_type();
  static const int kEntryTypeFieldNumber = 1;
  ::eraftpb::EntryType entry_type() const;
  void set_entry_type(::eraftpb::EntryType value);

  // @@protoc_insertion_point(class_scope:eraftpb.Entry)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  int entry_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftpb_2eproto;
};
// -------------------------------------------------------------------

class SnapshotMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftpb.SnapshotMetadata) */ {
 public:
  SnapshotMetadata();
  virtual ~SnapshotMetadata();

  SnapshotMetadata(const SnapshotMetadata& from);
  SnapshotMetadata(SnapshotMetadata&& from) noexcept
    : SnapshotMetadata() {
    *this = ::std::move(from);
  }

  inline SnapshotMetadata& operator=(const SnapshotMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapshotMetadata& operator=(SnapshotMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SnapshotMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotMetadata* internal_default_instance() {
    return reinterpret_cast<const SnapshotMetadata*>(
               &_SnapshotMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SnapshotMetadata* other);
  friend void swap(SnapshotMetadata& a, SnapshotMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMetadata* New() const final {
    return CreateMaybeMessage<SnapshotMetadata>(nullptr);
  }

  SnapshotMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SnapshotMetadata& from);
  void MergeFrom(const SnapshotMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftpb.SnapshotMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftpb_2eproto);
    return ::descriptor_table_eraftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .eraftpb.ConfState conf_state = 1;
  bool has_conf_state() const;
  void clear_conf_state();
  static const int kConfStateFieldNumber = 1;
  const ::eraftpb::ConfState& conf_state() const;
  ::eraftpb::ConfState* release_conf_state();
  ::eraftpb::ConfState* mutable_conf_state();
  void set_allocated_conf_state(::eraftpb::ConfState* conf_state);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:eraftpb.SnapshotMetadata)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::eraftpb::ConfState* conf_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftpb_2eproto;
};
// -------------------------------------------------------------------

class Snapshot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftpb.Snapshot) */ {
 public:
  Snapshot();
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Snapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Snapshot* other);
  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const final {
    return CreateMaybeMessage<Snapshot>(nullptr);
  }

  Snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftpb.Snapshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftpb_2eproto);
    return ::descriptor_table_eraftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // .eraftpb.SnapshotMetadata metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::eraftpb::SnapshotMetadata& metadata() const;
  ::eraftpb::SnapshotMetadata* release_metadata();
  ::eraftpb::SnapshotMetadata* mutable_metadata();
  void set_allocated_metadata(::eraftpb::SnapshotMetadata* metadata);

  // @@protoc_insertion_point(class_scope:eraftpb.Snapshot)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::eraftpb::SnapshotMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftpb_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftpb.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftpb.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftpb_2eproto);
    return ::descriptor_table_eraftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .eraftpb.Entry entries = 7;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 7;
  ::eraftpb::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftpb::Entry >*
      mutable_entries();
  const ::eraftpb::Entry& entries(int index) const;
  ::eraftpb::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftpb::Entry >&
      entries() const;

  // .eraftpb.Snapshot snapshot = 9;
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 9;
  const ::eraftpb::Snapshot& snapshot() const;
  ::eraftpb::Snapshot* release_snapshot();
  ::eraftpb::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::eraftpb::Snapshot* snapshot);

  // uint64 to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 from = 3;
  void clear_from();
  static const int kFromFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 term = 4;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 log_term = 5;
  void clear_log_term();
  static const int kLogTermFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_term() const;
  void set_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .eraftpb.MessageType msg_type = 1;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::eraftpb::MessageType msg_type() const;
  void set_msg_type(::eraftpb::MessageType value);

  // bool reject = 10;
  void clear_reject();
  static const int kRejectFieldNumber = 10;
  bool reject() const;
  void set_reject(bool value);

  // uint64 index = 6;
  void clear_index();
  static const int kIndexFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 commit = 8;
  void clear_commit();
  static const int kCommitFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit() const;
  void set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:eraftpb.Message)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftpb::Entry > entries_;
  ::eraftpb::Snapshot* snapshot_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 log_term_;
  int msg_type_;
  bool reject_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftpb_2eproto;
};
// -------------------------------------------------------------------

class HardState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftpb.HardState) */ {
 public:
  HardState();
  virtual ~HardState();

  HardState(const HardState& from);
  HardState(HardState&& from) noexcept
    : HardState() {
    *this = ::std::move(from);
  }

  inline HardState& operator=(const HardState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HardState& operator=(HardState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HardState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HardState* internal_default_instance() {
    return reinterpret_cast<const HardState*>(
               &_HardState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(HardState* other);
  friend void swap(HardState& a, HardState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HardState* New() const final {
    return CreateMaybeMessage<HardState>(nullptr);
  }

  HardState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HardState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HardState& from);
  void MergeFrom(const HardState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HardState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftpb.HardState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftpb_2eproto);
    return ::descriptor_table_eraftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 vote = 2;
  void clear_vote();
  static const int kVoteFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote() const;
  void set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 commit = 3;
  void clear_commit();
  static const int kCommitFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit() const;
  void set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:eraftpb.HardState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 vote_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftpb_2eproto;
};
// -------------------------------------------------------------------

class ConfState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftpb.ConfState) */ {
 public:
  ConfState();
  virtual ~ConfState();

  ConfState(const ConfState& from);
  ConfState(ConfState&& from) noexcept
    : ConfState() {
    *this = ::std::move(from);
  }

  inline ConfState& operator=(const ConfState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfState& operator=(ConfState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfState* internal_default_instance() {
    return reinterpret_cast<const ConfState*>(
               &_ConfState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ConfState* other);
  friend void swap(ConfState& a, ConfState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfState* New() const final {
    return CreateMaybeMessage<ConfState>(nullptr);
  }

  ConfState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfState& from);
  void MergeFrom(const ConfState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftpb.ConfState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftpb_2eproto);
    return ::descriptor_table_eraftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 nodes(int index) const;
  void set_nodes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_nodes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:eraftpb.ConfState)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > nodes_;
  mutable std::atomic<int> _nodes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftpb_2eproto;
};
// -------------------------------------------------------------------

class ConfChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:eraftpb.ConfChange) */ {
 public:
  ConfChange();
  virtual ~ConfChange();

  ConfChange(const ConfChange& from);
  ConfChange(ConfChange&& from) noexcept
    : ConfChange() {
    *this = ::std::move(from);
  }

  inline ConfChange& operator=(const ConfChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfChange& operator=(ConfChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfChange* internal_default_instance() {
    return reinterpret_cast<const ConfChange*>(
               &_ConfChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ConfChange* other);
  friend void swap(ConfChange& a, ConfChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfChange* New() const final {
    return CreateMaybeMessage<ConfChange>(nullptr);
  }

  ConfChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfChange& from);
  void MergeFrom(const ConfChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "eraftpb.ConfChange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_eraftpb_2eproto);
    return ::descriptor_table_eraftpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes context = 3;
  void clear_context();
  static const int kContextFieldNumber = 3;
  const std::string& context() const;
  void set_context(const std::string& value);
  void set_context(std::string&& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  std::string* mutable_context();
  std::string* release_context();
  void set_allocated_context(std::string* context);

  // uint64 node_id = 2;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .eraftpb.ConfChangeType change_type = 1;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::eraftpb::ConfChangeType change_type() const;
  void set_change_type(::eraftpb::ConfChangeType value);

  // @@protoc_insertion_point(class_scope:eraftpb.ConfChange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  int change_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_eraftpb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// .eraftpb.EntryType entry_type = 1;
inline void Entry::clear_entry_type() {
  entry_type_ = 0;
}
inline ::eraftpb::EntryType Entry::entry_type() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.entry_type)
  return static_cast< ::eraftpb::EntryType >(entry_type_);
}
inline void Entry::set_entry_type(::eraftpb::EntryType value) {
  
  entry_type_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Entry.entry_type)
}

// uint64 term = 2;
inline void Entry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.term)
  return term_;
}
inline void Entry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Entry.term)
}

// uint64 index = 3;
inline void Entry::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::index() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.index)
  return index_;
}
inline void Entry::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Entry.index)
}

// bytes data = 4;
inline void Entry::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Entry::data() const {
  // @@protoc_insertion_point(field_get:eraftpb.Entry.data)
  return data_.GetNoArena();
}
inline void Entry::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eraftpb.Entry.data)
}
inline void Entry::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftpb.Entry.data)
}
inline void Entry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftpb.Entry.data)
}
inline void Entry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftpb.Entry.data)
}
inline std::string* Entry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:eraftpb.Entry.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_data() {
  // @@protoc_insertion_point(field_release:eraftpb.Entry.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Entry.data)
}

// -------------------------------------------------------------------

// SnapshotMetadata

// .eraftpb.ConfState conf_state = 1;
inline bool SnapshotMetadata::has_conf_state() const {
  return this != internal_default_instance() && conf_state_ != nullptr;
}
inline void SnapshotMetadata::clear_conf_state() {
  if (GetArenaNoVirtual() == nullptr && conf_state_ != nullptr) {
    delete conf_state_;
  }
  conf_state_ = nullptr;
}
inline const ::eraftpb::ConfState& SnapshotMetadata::conf_state() const {
  const ::eraftpb::ConfState* p = conf_state_;
  // @@protoc_insertion_point(field_get:eraftpb.SnapshotMetadata.conf_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::eraftpb::ConfState*>(
      &::eraftpb::_ConfState_default_instance_);
}
inline ::eraftpb::ConfState* SnapshotMetadata::release_conf_state() {
  // @@protoc_insertion_point(field_release:eraftpb.SnapshotMetadata.conf_state)
  
  ::eraftpb::ConfState* temp = conf_state_;
  conf_state_ = nullptr;
  return temp;
}
inline ::eraftpb::ConfState* SnapshotMetadata::mutable_conf_state() {
  
  if (conf_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftpb::ConfState>(GetArenaNoVirtual());
    conf_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:eraftpb.SnapshotMetadata.conf_state)
  return conf_state_;
}
inline void SnapshotMetadata::set_allocated_conf_state(::eraftpb::ConfState* conf_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_state_;
  }
  if (conf_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf_state, submessage_arena);
    }
    
  } else {
    
  }
  conf_state_ = conf_state;
  // @@protoc_insertion_point(field_set_allocated:eraftpb.SnapshotMetadata.conf_state)
}

// uint64 index = 2;
inline void SnapshotMetadata::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMetadata::index() const {
  // @@protoc_insertion_point(field_get:eraftpb.SnapshotMetadata.index)
  return index_;
}
inline void SnapshotMetadata::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.SnapshotMetadata.index)
}

// uint64 term = 3;
inline void SnapshotMetadata::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SnapshotMetadata::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.SnapshotMetadata.term)
  return term_;
}
inline void SnapshotMetadata::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.SnapshotMetadata.term)
}

// -------------------------------------------------------------------

// Snapshot

// bytes data = 1;
inline void Snapshot::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Snapshot::data() const {
  // @@protoc_insertion_point(field_get:eraftpb.Snapshot.data)
  return data_.GetNoArena();
}
inline void Snapshot::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eraftpb.Snapshot.data)
}
inline void Snapshot::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftpb.Snapshot.data)
}
inline void Snapshot::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftpb.Snapshot.data)
}
inline void Snapshot::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftpb.Snapshot.data)
}
inline std::string* Snapshot::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:eraftpb.Snapshot.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Snapshot::release_data() {
  // @@protoc_insertion_point(field_release:eraftpb.Snapshot.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Snapshot::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Snapshot.data)
}

// .eraftpb.SnapshotMetadata metadata = 2;
inline bool Snapshot::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void Snapshot::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::eraftpb::SnapshotMetadata& Snapshot::metadata() const {
  const ::eraftpb::SnapshotMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:eraftpb.Snapshot.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::eraftpb::SnapshotMetadata*>(
      &::eraftpb::_SnapshotMetadata_default_instance_);
}
inline ::eraftpb::SnapshotMetadata* Snapshot::release_metadata() {
  // @@protoc_insertion_point(field_release:eraftpb.Snapshot.metadata)
  
  ::eraftpb::SnapshotMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::eraftpb::SnapshotMetadata* Snapshot::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftpb::SnapshotMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:eraftpb.Snapshot.metadata)
  return metadata_;
}
inline void Snapshot::set_allocated_metadata(::eraftpb::SnapshotMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Snapshot.metadata)
}

// -------------------------------------------------------------------

// Message

// .eraftpb.MessageType msg_type = 1;
inline void Message::clear_msg_type() {
  msg_type_ = 0;
}
inline ::eraftpb::MessageType Message::msg_type() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.msg_type)
  return static_cast< ::eraftpb::MessageType >(msg_type_);
}
inline void Message::set_msg_type(::eraftpb::MessageType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.msg_type)
}

// uint64 to = 2;
inline void Message::clear_to() {
  to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::to() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.to)
  return to_;
}
inline void Message::set_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.to)
}

// uint64 from = 3;
inline void Message::clear_from() {
  from_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::from() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.from)
  return from_;
}
inline void Message::set_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.from)
}

// uint64 term = 4;
inline void Message::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.term)
  return term_;
}
inline void Message::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.term)
}

// uint64 log_term = 5;
inline void Message::clear_log_term() {
  log_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::log_term() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.log_term)
  return log_term_;
}
inline void Message::set_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  log_term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.log_term)
}

// uint64 index = 6;
inline void Message::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::index() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.index)
  return index_;
}
inline void Message::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.index)
}

// repeated .eraftpb.Entry entries = 7;
inline int Message::entries_size() const {
  return entries_.size();
}
inline void Message::clear_entries() {
  entries_.Clear();
}
inline ::eraftpb::Entry* Message::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:eraftpb.Message.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftpb::Entry >*
Message::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:eraftpb.Message.entries)
  return &entries_;
}
inline const ::eraftpb::Entry& Message::entries(int index) const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.entries)
  return entries_.Get(index);
}
inline ::eraftpb::Entry* Message::add_entries() {
  // @@protoc_insertion_point(field_add:eraftpb.Message.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::eraftpb::Entry >&
Message::entries() const {
  // @@protoc_insertion_point(field_list:eraftpb.Message.entries)
  return entries_;
}

// uint64 commit = 8;
inline void Message::clear_commit() {
  commit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::commit() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.commit)
  return commit_;
}
inline void Message::set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.commit)
}

// .eraftpb.Snapshot snapshot = 9;
inline bool Message::has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline void Message::clear_snapshot() {
  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::eraftpb::Snapshot& Message::snapshot() const {
  const ::eraftpb::Snapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:eraftpb.Message.snapshot)
  return p != nullptr ? *p : *reinterpret_cast<const ::eraftpb::Snapshot*>(
      &::eraftpb::_Snapshot_default_instance_);
}
inline ::eraftpb::Snapshot* Message::release_snapshot() {
  // @@protoc_insertion_point(field_release:eraftpb.Message.snapshot)
  
  ::eraftpb::Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::eraftpb::Snapshot* Message::mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::eraftpb::Snapshot>(GetArenaNoVirtual());
    snapshot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:eraftpb.Message.snapshot)
  return snapshot_;
}
inline void Message::set_allocated_snapshot(::eraftpb::Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:eraftpb.Message.snapshot)
}

// bool reject = 10;
inline void Message::clear_reject() {
  reject_ = false;
}
inline bool Message::reject() const {
  // @@protoc_insertion_point(field_get:eraftpb.Message.reject)
  return reject_;
}
inline void Message::set_reject(bool value) {
  
  reject_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.Message.reject)
}

// -------------------------------------------------------------------

// HardState

// uint64 term = 1;
inline void HardState::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::term() const {
  // @@protoc_insertion_point(field_get:eraftpb.HardState.term)
  return term_;
}
inline void HardState::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.HardState.term)
}

// uint64 vote = 2;
inline void HardState::clear_vote() {
  vote_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::vote() const {
  // @@protoc_insertion_point(field_get:eraftpb.HardState.vote)
  return vote_;
}
inline void HardState::set_vote(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  vote_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.HardState.vote)
}

// uint64 commit = 3;
inline void HardState::clear_commit() {
  commit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HardState::commit() const {
  // @@protoc_insertion_point(field_get:eraftpb.HardState.commit)
  return commit_;
}
inline void HardState::set_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.HardState.commit)
}

// -------------------------------------------------------------------

// ConfState

// repeated uint64 nodes = 1;
inline int ConfState::nodes_size() const {
  return nodes_.size();
}
inline void ConfState::clear_nodes() {
  nodes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfState::nodes(int index) const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfState.nodes)
  return nodes_.Get(index);
}
inline void ConfState::set_nodes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:eraftpb.ConfState.nodes)
}
inline void ConfState::add_nodes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:eraftpb.ConfState.nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ConfState::nodes() const {
  // @@protoc_insertion_point(field_list:eraftpb.ConfState.nodes)
  return nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ConfState::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:eraftpb.ConfState.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// ConfChange

// .eraftpb.ConfChangeType change_type = 1;
inline void ConfChange::clear_change_type() {
  change_type_ = 0;
}
inline ::eraftpb::ConfChangeType ConfChange::change_type() const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfChange.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
inline void ConfChange::set_change_type(::eraftpb::ConfChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.ConfChange.change_type)
}

// uint64 node_id = 2;
inline void ConfChange::clear_node_id() {
  node_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConfChange::node_id() const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfChange.node_id)
  return node_id_;
}
inline void ConfChange::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:eraftpb.ConfChange.node_id)
}

// bytes context = 3;
inline void ConfChange::clear_context() {
  context_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfChange::context() const {
  // @@protoc_insertion_point(field_get:eraftpb.ConfChange.context)
  return context_.GetNoArena();
}
inline void ConfChange::set_context(const std::string& value) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:eraftpb.ConfChange.context)
}
inline void ConfChange::set_context(std::string&& value) {
  
  context_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:eraftpb.ConfChange.context)
}
inline void ConfChange::set_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:eraftpb.ConfChange.context)
}
inline void ConfChange::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:eraftpb.ConfChange.context)
}
inline std::string* ConfChange::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:eraftpb.ConfChange.context)
  return context_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfChange::release_context() {
  // @@protoc_insertion_point(field_release:eraftpb.ConfChange.context)
  
  return context_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfChange::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:eraftpb.ConfChange.context)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace eraftpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eraftpb::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftpb::EntryType>() {
  return ::eraftpb::EntryType_descriptor();
}
template <> struct is_proto_enum< ::eraftpb::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftpb::MessageType>() {
  return ::eraftpb::MessageType_descriptor();
}
template <> struct is_proto_enum< ::eraftpb::ConfChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eraftpb::ConfChangeType>() {
  return ::eraftpb::ConfChangeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eraftpb_2eproto
